package cn.cadal.dis.java.cassandra;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import org.apache.cassandra.thrift.Cassandra;
import org.apache.cassandra.thrift.Column;
import org.apache.cassandra.thrift.ColumnOrSuperColumn;
import org.apache.cassandra.thrift.ColumnParent;
import org.apache.cassandra.thrift.ColumnPath;
import org.apache.cassandra.thrift.ConsistencyLevel;
import org.apache.cassandra.thrift.Mutation;
import org.apache.cassandra.thrift.SlicePredicate;
import org.apache.cassandra.thrift.SliceRange;
import org.apache.cassandra.thrift.SuperColumn;
import org.apache.thrift.protocol.TBinaryProtocol;
import org.apache.thrift.protocol.TProtocol;
import org.apache.thrift.transport.TFramedTransport;
import org.apache.thrift.transport.TSocket;
import org.apache.thrift.transport.TTransport;

import cn.cadal.dis.java.utils.TimeOp;

public class CasTimePV {
	
	private TimeOp timeOp = null;
	
	public CasTimePV() {
		this.timeOp = new TimeOp();
	}

	public int InsertRecordMinute(String str) {
		String[] strList = str.split("\\$");

		String IP = strList[0]; 		// 10.15.62.237
		String USERNAME = strList[1]; 	// Yanfei
		String BOOKNO = strList[2]; 	// 07018720
		String PAGENO = strList[3]; 	// 00000028
		String TIME = strList[4]; 		// 2013-03-13 08:51:13.123456

		String key_name = TIME.substring(0, 16); // 2013-03-13 08:51

		String super_key_name = String.valueOf(UUID.randomUUID());
		String ColumnFamilyName = "RecordMinute";

		try {
			TTransport tr = new TFramedTransport(new TSocket("10.15.61.111",
					9160));

			TProtocol proto = new TBinaryProtocol(tr);
			Cassandra.Client client = new Cassandra.Client(proto);

			tr.open();

			// client.set_keyspace("CadalSecTest");
			client.set_keyspace("CadalSec");

			long timeStamp = System.currentTimeMillis();

			Map<ByteBuffer, Map<String, List<Mutation>>> outerMap = new HashMap<ByteBuffer, Map<String, List<Mutation>>>();
			List<Mutation> columnToAdd = new ArrayList<Mutation>();

			// 
			Column idColumnIp = new Column();
			idColumnIp.setName(toByteBuffer("ip"));
			idColumnIp.setValue(toByteBuffer(IP));
			idColumnIp.setTimestamp(timeStamp);

			Column idColumnUsername = new Column();
			idColumnUsername.setName(toByteBuffer("username"));
			idColumnUsername.setValue(toByteBuffer(USERNAME));
			idColumnUsername.setTimestamp(timeStamp);

			Column idColumnBookno = new Column();
			idColumnBookno.setName(toByteBuffer("bookno"));
			idColumnBookno.setValue(toByteBuffer(BOOKNO));
			idColumnBookno.setTimestamp(timeStamp);

			Column idColumnPageno = new Column();
			idColumnPageno.setName(toByteBuffer("pageno"));
			idColumnPageno.setValue(toByteBuffer(PAGENO));
			idColumnPageno.setTimestamp(timeStamp);

			Column idColumnTime = new Column();
			idColumnTime.setName(toByteBuffer("time"));
			idColumnTime.setValue(toByteBuffer(TIME));
			idColumnTime.setTimestamp(timeStamp);

			List<Column> cols = new ArrayList<Column>();
			cols.add(idColumnIp);
			cols.add(idColumnUsername);
			cols.add(idColumnBookno);
			cols.add(idColumnPageno);
			cols.add(idColumnTime);

			//
			Map<String, List<Mutation>> innerMap = new HashMap<String, List<Mutation>>();

			Mutation columns = new Mutation();
			ColumnOrSuperColumn columnOrSuperColumn = new ColumnOrSuperColumn();
			SuperColumn superColumn = new SuperColumn();

			superColumn.name = toByteBuffer(super_key_name);
			superColumn.columns = cols;

			columnOrSuperColumn.super_column = superColumn;
			columns.setColumn_or_supercolumn(columnOrSuperColumn);

			columnToAdd.add(columns);

			ColumnPath columnPath = new ColumnPath();
			columnPath.column_family = ColumnFamilyName;
			columnPath.setSuper_column(toByteBuffer(super_key_name));
			columnPath.setSuper_columnIsSet(true);

			innerMap.put(ColumnFamilyName, columnToAdd);

			// Insert
			outerMap.put(toByteBuffer(key_name), innerMap);

			client.batch_mutate(outerMap, ConsistencyLevel.ONE);

			tr.close();

			return 0;
		} catch (Exception e) {
			e.printStackTrace();

			return 1;
		}
	}

	/**
	 * Query from cf [RecordMinute]
	 * 
	 * @param queryWord
	 */
	public int QueryRecordMinute(String queryWord) {
		TTransport tr = new TFramedTransport(new TSocket("10.15.61.111", 9160));
		TProtocol proto = new TBinaryProtocol(tr);
		Cassandra.Client client = new Cassandra.Client(proto);

		try {
			tr.open();
			client.set_keyspace("CadalSecTest");

			// read entire row
			//System.out.println("------------Entire---------------");
			SlicePredicate predicate = new SlicePredicate();// new SliceRange(new byte[0], new byte[0], false, 10)
			SliceRange range = new SliceRange();
			range.start = toByteBuffer("");
			range.finish = toByteBuffer("");
			predicate.setSlice_range(range);

			ColumnParent parent = new ColumnParent();
			parent.column_family = "RecordMinute";

			List<ColumnOrSuperColumn> results = client.get_slice(toByteBuffer(queryWord), parent, predicate, ConsistencyLevel.ONE);
			
			tr.close();
			
			return results.size();
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return 0;
	}

	/**
	 * Query from cf [RecordMinute]
	 * 
	 * @param queryWord
	 */
	public int QueryRecordTimeSlide(String queryTimeStart, String queryTimeEnd) {
		TTransport tr = new TFramedTransport(new TSocket("10.15.61.111", 9160));
		TProtocol proto = new TBinaryProtocol(tr);
		Cassandra.Client client = new Cassandra.Client(proto);

		Date dateQuery = this.timeOp.getFormatDate(queryTimeStart);
		Date dateEnd   = this.timeOp.getFormatDate(queryTimeEnd);
		
		int count = 0;
		
		try {
			tr.open();
			client.set_keyspace("CadalSecTest");

			// read entire row
			//System.out.println("------------Entire---------------");
			SlicePredicate predicate = new SlicePredicate();// new SliceRange(new byte[0], new byte[0], false, 10)
			SliceRange range = new SliceRange();
			range.start = toByteBuffer("");
			range.finish = toByteBuffer("");
			predicate.setSlice_range(range);

			ColumnParent parent = new ColumnParent();
			parent.column_family = "RecordMinute";
			
			String queryWord = this.timeOp.getFormatDate(dateQuery);
			
			while(dateQuery.before(dateEnd)) {
				List<ColumnOrSuperColumn> results = client.get_slice(toByteBuffer(queryWord), parent, predicate, ConsistencyLevel.ONE);
				count += results.size();
				dateQuery = this.timeOp.getFormatDate(this.timeOp.getPreDate(dateQuery, "m", 1));
				queryWord = this.timeOp.getFormatDate(dateQuery);
				
				System.out.println(count);
			}
			
			tr.close();
			
			return count;
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		return 0;
	}

	/**
	 * String => bytebuffer
	 */
	public ByteBuffer toByteBuffer(String value) {
		try {
			return ByteBuffer.wrap(value.getBytes("UTF-8"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// Test
		// String strTmp =
		// "290.15.6.200$Yanfei$07018720$00000180$2013-03-13 22:07:02.909009";

		CasTimePV co = new CasTimePV();

		// Insert into cf [RecordMinute]
		// co.InsertRecordMinute(strTmp);

		// Query from cf [RecordMinute]
		//System.out.println(co.QueryRecordMinute("2013-04-01 10:00"));
		
		co.QueryRecordTimeSlide("2013-04-09 09:00", "2013-04-09 09:10");
	}

}
