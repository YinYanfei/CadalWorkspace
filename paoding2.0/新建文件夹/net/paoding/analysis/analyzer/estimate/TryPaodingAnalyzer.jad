// Decompiled by DJ v3.7.7.81 Copyright 2004 Atanas Neshkov  Date: 2008-7-9 ÏÂÎç 11:17:30
// Home Page : http://members.fortunecity.com/neshkov/dj.html  - Check often for new version!
// Decompiler options: packimports(3) 
// Source File Name:   TryPaodingAnalyzer.java

package net.paoding.analysis.analyzer.estimate;

import java.io.*;
import java.net.URL;
import net.paoding.analysis.analyzer.PaodingAnalyzer;
import net.paoding.analysis.analyzer.PaodingAnalyzerBean;
import org.apache.lucene.analysis.Analyzer;

// Referenced classes of package net.paoding.analysis.analyzer.estimate:
//            Estimate

public class TryPaodingAnalyzer
{

    public TryPaodingAnalyzer()
    {
    }

    public static void main(String args[])
    {
        int inInput;
        int i;
        resetArgs();
        inInput = 0;
        i = 0;
_L2:
        if(i >= args.length)
            break MISSING_BLOCK_LABEL_415;
        if(args[i] == null || (args[i] = args[i].trim()).length() == 0)
            break MISSING_BLOCK_LABEL_409;
        if(args[i].equals("--file") || args[i].equals("-f"))
        {
            file = args[++i];
            break MISSING_BLOCK_LABEL_409;
        }
        if(args[i].equals("--charset") || args[i].equals("-c"))
        {
            charset = args[++i];
            break MISSING_BLOCK_LABEL_409;
        }
        if(args[i].equals("--mode") || args[i].equals("-m"))
        {
            mode = args[++i];
            break MISSING_BLOCK_LABEL_409;
        }
        if(args[i].equals("--properties") || args[i].equals("-p"))
        {
            properties = args[++i];
            break MISSING_BLOCK_LABEL_409;
        }
        if(args[i].equals("--analyzer") || args[i].equals("-a"))
        {
            analyzerName = args[++i];
            break MISSING_BLOCK_LABEL_409;
        }
        if(args[i].equals("--print") || args[i].equals("-P"))
        {
            print = args[++i];
            break MISSING_BLOCK_LABEL_409;
        }
        if(args[i].equals("--input") || args[i].equals("-i"))
        {
            inInput++;
            break MISSING_BLOCK_LABEL_409;
        }
        if(args[i].equals("--help") || args[i].equals("-h") || args[i].equals("?"))
        {
            printHelp();
            return;
        }
        if(!args[i].startsWith("-") && (i == 0 || args[i - 1].equals("-i") || args[i - 1].equals("--input") || !args[i - 1].startsWith("-")))
        {
            if(input == null)
                input = args[i];
            else
                input = input + ' ' + args[i];
            inInput++;
        }
        i++;
        if(true) goto _L2; else goto _L1
_L1:
        if(file != null)
        {
            input = null;
            reader = getReader(file, charset);
        }
        analysing();
        break MISSING_BLOCK_LABEL_451;
        Exception e1;
        e1;
        resetArgs();
        e1.printStackTrace();
    }

    private static void resetArgs()
    {
        input = null;
        file = null;
        reader = null;
        charset = null;
        mode = null;
        print = null;
        analyzerName = null;
        properties = "classpath:paoding-analysis.properties";
    }

    private static void analysing()
        throws Exception
    {
        Analyzer analyzer;
        if(analyzerName == null || analyzerName.length() == 0 || analyzerName.equalsIgnoreCase("paoding"))
        {
            analyzer = new PaodingAnalyzer(properties);
            if(mode != null)
                ((PaodingAnalyzer)analyzer).setMode(mode);
        } else
        {
            if(analyzerName.equalsIgnoreCase("standard"))
                analyzerName = "org.apache.lucene.analysis.standard.StandardAnalyzer";
            else
            if(analyzerName.equalsIgnoreCase("cjk"))
                analyzerName = "org.apache.lucene.analysis.cjk.CJKAnalyzer";
            else
            if(analyzerName.equalsIgnoreCase("cn") || analyzerName.equalsIgnoreCase("chinese"))
                analyzerName = "org.apache.lucene.analysis.cn.ChineseAnalyzer";
            else
            if(analyzerName.equalsIgnoreCase("st") || analyzerName.equalsIgnoreCase("standard"))
                analyzerName = "org.apache.lucene.analysis.standard.StandardAnalyzer";
            Class clz = Class.forName(analyzerName);
            analyzer = (Analyzer)clz.newInstance();
        }
        boolean readInputFromConsle = false;
        Estimate estimate = new Estimate(analyzer);
        if(print != null)
            estimate.setPrint(print);
        do
        {
            do
            {
                if(reader != null)
                    break;
                if(input == null || input.length() == 0 || readInputFromConsle)
                {
                    input = getInputFromConsole();
                    readInputFromConsle = true;
                }
                if(input == null || input.length() == 0)
                {
                    System.out.println("Warn: none charactors you input!!");
                    continue;
                }
                if(!input.startsWith(":"))
                    break;
                String argsStr = input.substring(":".length());
                main(argsStr.split(" "));
            } while(true);
            if(reader != null)
            {
                estimate.test(System.out, reader);
                reader = null;
            } else
            {
                estimate.test(System.out, input);
                input = null;
            }
            System.out.println("--------------------------------------------------");
        } while(readInputFromConsle);
    }

    private static String getInputFromConsole()
        throws IOException
    {
        printTitleIfNotPrinted("");
        String input = null;
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
        do
        {
            String line;
            do
            {
                System.out.print("paoding> ");
                line = reader.readLine();
            } while(line == null || line.length() == 0);
            if(line.equals(":clear") || line.equals(":c"))
            {
                input = null;
                System.out.println("paoding> Cleared");
                return getInputFromConsole();
            }
            if(line.equals(":exit") || line.equals(":quit") || line.equals(":e") || line.equals(":q"))
            {
                System.out.println("Bye!");
                System.exit(0);
                continue;
            }
            if(input == null && line.startsWith(":"))
            {
                input = line;
                break;
            }
            if(line.endsWith(";"))
            {
                if(line.length() > ";".length())
                    input = line.substring(0, line.length() - ";".length());
                break;
            }
            if(input == null)
                input = line;
            else
                input = input + "\n" + line;
        } while(true);
        return input != null ? input.trim() : null;
    }

    private static void printHelp()
    {
        String app = System.getProperty("paoding.try.app", "TryPaodingAnalyzer");
        String cmd = System.getProperty("paoding.try.cmd", "java " + (net.paoding.analysis.analyzer.estimate.TryPaodingAnalyzer.class).getName());
        System.out.println(app + "\u7684\u7528\u6CD5:");
        System.out.println("\t" + cmd + " [OPTIONS] [text_content]");
        System.out.println("\nOPTIONS:");
        System.out.println("\t--file, -f:\n\t\t\u6587\u7AE0\u4EE5\u6587\u4EF6\u7684\u5F62\u5F0F\u8F93\u5165\uFF0C\u5728\u524D\u7F00\u52A0\u4E0A\"classpath:\"\u8868\u793A\u4ECE\u7C7B\u8DEF\u5F84\u4E2D\u5BFB\u627E\u8BE5\u6587\u4EF6\u3002");
        System.out.println("\t--charset, -c:\n\t\t\u6587\u7AE0\u7684\u5B57\u7B26\u96C6\u7F16\u7801\uFF0C\u6BD4\u5982gbk,utf-8\u7B49\u3002\u5982\u679C\u6CA1\u6709\u8BBE\u7F6E\u8BE5\u9009\u9879\uFF0C\u5219\u4F7F\u7528Java\u73AF\u5883\u9ED8\u8BA4\u7684\u5B57\u7B26\u96C6\u7F16\u7801\u3002");
        System.out.println("\t--properties, -p:\n\t\t\u4E0D\u8BFB\u53D6\u9ED8\u8BA4\u7684\u7C7B\u8DEF\u5F84\u4E0B\u7684\u5E96\u4E01\u5206\u8BCD\u5C5E\u6027\u6587\u4EF6\uFF0C\u800C\u4F7F\u7528\u6307\u5B9A\u7684\u6587\u4EF6\uFF0C\u5728\u524D\u7F00\u52A0\u4E0A\"classpath:\"\u8868\u793A\u4ECE\u7C7B\u8DEF\u5F84\u4E2D\u5BFB\u627E\u8BE5\u6587\u4EF6\u3002");
        System.out.println("\t--mode, -m:\n\t\t\u5F3A\u5236\u4F7F\u7528\u7ED9\u5B9A\u7684mode\u7684\u5206\u8BCD\u5668\uFF1B\u53EF\u4EE5\u8BBE\u5B9A\u4E3Adefault,most-words,max-word-length\u6216\u6307\u5B9A\u7C7B\u540D\u7684\u5176\u4ED6mode(\u6307\u5B9A\u7C7B\u540D\u7684\uFF0C\u9700\u8981\u52A0\u524D\u7F00\"class:\")\u3002");
        System.out.println("\t--input, -i:\n\t\t\u8981\u88AB\u5206\u8BCD\u7684\u6587\u7AE0\u5185\u5BB9\uFF1B\u5F53\u6CA1\u6709\u901A\u8FC7-f\u6216--file\u6307\u5B9A\u6587\u7AE0\u8F93\u5165\u6587\u4EF6\u65F6\u53EF\u9009\u62E9\u8FD9\u4E2A\u9009\u9879\u6307\u5B9A\u8981\u88AB\u5206\u8BCD\u7684\u5185\u5BB9\u3002");
        System.out.println("\t--analyzer, -a:\n\t\t\u6D4B\u8BD5\u5176\u4ED6\u5206\u8BCD\u5668\uFF0C\u901A\u8FC7--analyzer\u6216-a\u6307\u5B9A\u5176\u5B8C\u6574\u7C7B\u540D\u3002\u7279\u522B\u5730\uFF0Cpaoding\u3001cjk\u3001chinese\u3001st\u5206\u522B\u5BF9\u5E94PaodingAnalyzer\u3001CJKAnalyzer\u3001ChineseAnalyzer\u3001StandardAnalyzer");
        System.out.println("\t--print, -P:\n\t\t \u662F\u5426\u6253\u5370\u5206\u8BCD\u7ED3\u679C\u3002\u9ED8\u8BA4\u6253\u5370\u524D50\u884C\u3002\u89C4\u5219\uFF1Ano\u8868\u793A\u4E0D\u6253\u5370\uFF1B50\u7B49\u4EF7\u4E8E1-50\u884C\uFF1B1-50\u8868\u793A\u6253\u53701\u81F350\u884C;\u53EF\u4EE5\u4EE5\u9017\u53F7\u7EC4\u5408\u4F7F\u7528\uFF0C\u598220,40-50\u8868\u793A\u6253\u53701-20\u4EE5\u53CA40-50\u884C");
        System.out.println("\n\u793A\u4F8B:");
        System.out.println("\t" + cmd);
        System.out.println("\t" + cmd + " ?");
        System.out.println("\t" + cmd + " \u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD");
        System.out.println("\t" + cmd + " -m max \u4E2D\u534E\u4EBA\u6C11\u5171\u548C\u56FD");
        System.out.println("\t" + cmd + " -f e:/content.txt -c utf8");
        System.out.println("\t" + cmd + " -f e:/content.txt -c utf8 -m max-word-length");
        System.out.println("\t" + cmd + " -f e:/content.txt -c utf8 -a cjk");
        System.out.println("\n\u82E5\u662F\u63A7\u5236\u53F0\u8FDB\u5165\"paoding>\"\u540E:");
        titlePrinted = false;
        printTitleIfNotPrinted("\t");
    }

    private static void printTitleIfNotPrinted(String prefix)
    {
        if(!titlePrinted)
        {
            System.out.println();
            if(!welcomePrinted)
            {
                System.out.println("Welcome to Paoding Analyser(2.0.4-alpha2)");
                System.out.println();
                welcomePrinted = true;
            }
            System.out.println(prefix + "\u76F4\u63A5\u8F93\u5165\u6216\u7C98\u8D34\u8981\u88AB\u5206\u8BCD\u7684\u5185\u5BB9\uFF0C\u4EE5\u5206\u53F7;\u7ED3\u675F\uFF0C\u56DE\u8F66\u540E\u5F00\u59CB\u5206\u8BCD\u3002");
            System.out.println(prefix + "\u53E6\u8D77\u4E00\u884C\u8F93\u5165:clear\u6216:c\uFF0C\u4F7F\u6B64\u6B21\u8F93\u5165\u65E0\u6548\uFF0C\u7528\u4EE5\u91CD\u65B0\u8F93\u5165\u3002");
            System.out.println(prefix + "\u8981\u4F7F\u7528\u547D\u4EE4\u884C\u53C2\u6570\u8BFB\u5165\u6587\u4EF6\u5185\u5BB9\u6216\u5176\u4ED6\u53C2\u6570\u8BF7\u4EE5\u5192\u53F7:\u5F00\u59CB\uFF0C\u7136\u540E\u8F93\u5165\u53C2\u6570\u9009\u9879\u3002");
            System.out.println(prefix + "\u9000\u51FA\uFF0C\u8BF7\u8F93\u5165:quit\u6216:q\u3001:exit\u3001:e");
            System.out.println(prefix + "\u9700\u8981\u5E2E\u52A9\uFF0C\u8BF7\u8F93\u5165:?");
            System.out.println(prefix + "\u6CE8\u610F\uFF1A\u6307\u5B9A\u5BF9\u6587\u4EF6\u5206\u8BCD\u4E4B\u524D\u8981\u4E86\u89E3\u8BE5\u6587\u4EF6\u7684\u7F16\u7801\uFF0C\u5982\u679C\u7CFB\u7EDF\u7F16\u7801\u548C\u6587\u4EF6\u7F16\u7801\u4E0D\u4E00\u81F4\uFF0C\u8981\u901A\u8FC7-c\u6307\u5B9A\u6587\u4EF6\u7684\u7F16\u7801\u3002");
            System.out.println();
            titlePrinted = true;
        }
    }

    static String getContent(String path, String encoding)
        throws IOException
    {
        return (String)read(path, encoding, true);
    }

    static Reader getReader(String path, String encoding)
        throws IOException
    {
        return (Reader)read(path, encoding, false);
    }

    static Object read(String path, String encoding, boolean return_string)
        throws IOException
    {
        java.io.InputStream in;
        if(path.startsWith("classpath:"))
        {
            path = path.substring("classpath:".length());
            URL url = (net.paoding.analysis.analyzer.estimate.Estimate.class).getClassLoader().getResource(path);
            if(url == null)
                throw new IllegalArgumentException("Not found " + path + " in classpath.");
            System.out.println("read content from:" + url.getFile());
            in = url.openStream();
        } else
        {
            File f = new File(path);
            if(!f.exists())
                throw new IllegalArgumentException("Not found " + path + " in system.");
            System.out.println("read content from:" + f.getAbsolutePath());
            in = new FileInputStream(f);
        }
        Reader re;
        if(encoding != null)
            re = new InputStreamReader(in, encoding);
        else
            re = new InputStreamReader(in);
        if(!return_string)
            return re;
        char chs[] = new char[1024];
        StringBuffer content = new StringBuffer();
        int count;
        while((count = re.read(chs)) != -1) 
            content.append(chs, 0, count);
        re.close();
        return content.toString();
    }

    private static final String ARGS_TIP = ":";
    static String input = null;
    static String file = null;
    static Reader reader = null;
    static String charset = null;
    static String mode = null;
    static String analyzerName = null;
    static String print = null;
    static String properties = "classpath:paoding-analysis.properties";
    private static boolean titlePrinted = false;
    private static boolean welcomePrinted = false;

}