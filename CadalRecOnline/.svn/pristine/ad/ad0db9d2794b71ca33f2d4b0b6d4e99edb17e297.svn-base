/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.cadal.rec.ol.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;

public class User implements org.apache.thrift.TBase<User, User._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("User");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_HOMETOWN_FIELD_DESC = new org.apache.thrift.protocol.TField("userHometown", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_SCHOOL_FIELD_DESC = new org.apache.thrift.protocol.TField("userSchool", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_BIRTHDAY_FIELD_DESC = new org.apache.thrift.protocol.TField("userBirthday", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField USER_GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("userGender", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USER_EMAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("userEmail", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USER_REGISTER_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("userRegisterTime", org.apache.thrift.protocol.TType.STRING, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new UserStandardSchemeFactory());
    schemes.put(TupleScheme.class, new UserTupleSchemeFactory());
  }

  public int userId; // required
  public String userName; // required
  public String userHometown; // required
  public String userSchool; // required
  public String userBirthday; // required
  public String userGender; // required
  public String userEmail; // required
  public String userRegisterTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_NAME((short)2, "userName"),
    USER_HOMETOWN((short)3, "userHometown"),
    USER_SCHOOL((short)4, "userSchool"),
    USER_BIRTHDAY((short)5, "userBirthday"),
    USER_GENDER((short)6, "userGender"),
    USER_EMAIL((short)7, "userEmail"),
    USER_REGISTER_TIME((short)8, "userRegisterTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // USER_HOMETOWN
          return USER_HOMETOWN;
        case 4: // USER_SCHOOL
          return USER_SCHOOL;
        case 5: // USER_BIRTHDAY
          return USER_BIRTHDAY;
        case 6: // USER_GENDER
          return USER_GENDER;
        case 7: // USER_EMAIL
          return USER_EMAIL;
        case 8: // USER_REGISTER_TIME
          return USER_REGISTER_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_HOMETOWN, new org.apache.thrift.meta_data.FieldMetaData("userHometown", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_SCHOOL, new org.apache.thrift.meta_data.FieldMetaData("userSchool", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_BIRTHDAY, new org.apache.thrift.meta_data.FieldMetaData("userBirthday", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_GENDER, new org.apache.thrift.meta_data.FieldMetaData("userGender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_EMAIL, new org.apache.thrift.meta_data.FieldMetaData("userEmail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_REGISTER_TIME, new org.apache.thrift.meta_data.FieldMetaData("userRegisterTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(User.class, metaDataMap);
  }

  public User() {
  }

  public User(
    int userId,
    String userName,
    String userHometown,
    String userSchool,
    String userBirthday,
    String userGender,
    String userEmail,
    String userRegisterTime)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.userName = userName;
    this.userHometown = userHometown;
    this.userSchool = userSchool;
    this.userBirthday = userBirthday;
    this.userGender = userGender;
    this.userEmail = userEmail;
    this.userRegisterTime = userRegisterTime;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public User(User other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.userId = other.userId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetUserHometown()) {
      this.userHometown = other.userHometown;
    }
    if (other.isSetUserSchool()) {
      this.userSchool = other.userSchool;
    }
    if (other.isSetUserBirthday()) {
      this.userBirthday = other.userBirthday;
    }
    if (other.isSetUserGender()) {
      this.userGender = other.userGender;
    }
    if (other.isSetUserEmail()) {
      this.userEmail = other.userEmail;
    }
    if (other.isSetUserRegisterTime()) {
      this.userRegisterTime = other.userRegisterTime;
    }
  }

  public User deepCopy() {
    return new User(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.userName = null;
    this.userHometown = null;
    this.userSchool = null;
    this.userBirthday = null;
    this.userGender = null;
    this.userEmail = null;
    this.userRegisterTime = null;
  }

  public int getUserId() {
    return this.userId;
  }

  public User setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bit_vector.clear(__USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return __isset_bit_vector.get(__USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bit_vector.set(__USERID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public User setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getUserHometown() {
    return this.userHometown;
  }

  public User setUserHometown(String userHometown) {
    this.userHometown = userHometown;
    return this;
  }

  public void unsetUserHometown() {
    this.userHometown = null;
  }

  /** Returns true if field userHometown is set (has been assigned a value) and false otherwise */
  public boolean isSetUserHometown() {
    return this.userHometown != null;
  }

  public void setUserHometownIsSet(boolean value) {
    if (!value) {
      this.userHometown = null;
    }
  }

  public String getUserSchool() {
    return this.userSchool;
  }

  public User setUserSchool(String userSchool) {
    this.userSchool = userSchool;
    return this;
  }

  public void unsetUserSchool() {
    this.userSchool = null;
  }

  /** Returns true if field userSchool is set (has been assigned a value) and false otherwise */
  public boolean isSetUserSchool() {
    return this.userSchool != null;
  }

  public void setUserSchoolIsSet(boolean value) {
    if (!value) {
      this.userSchool = null;
    }
  }

  public String getUserBirthday() {
    return this.userBirthday;
  }

  public User setUserBirthday(String userBirthday) {
    this.userBirthday = userBirthday;
    return this;
  }

  public void unsetUserBirthday() {
    this.userBirthday = null;
  }

  /** Returns true if field userBirthday is set (has been assigned a value) and false otherwise */
  public boolean isSetUserBirthday() {
    return this.userBirthday != null;
  }

  public void setUserBirthdayIsSet(boolean value) {
    if (!value) {
      this.userBirthday = null;
    }
  }

  public String getUserGender() {
    return this.userGender;
  }

  public User setUserGender(String userGender) {
    this.userGender = userGender;
    return this;
  }

  public void unsetUserGender() {
    this.userGender = null;
  }

  /** Returns true if field userGender is set (has been assigned a value) and false otherwise */
  public boolean isSetUserGender() {
    return this.userGender != null;
  }

  public void setUserGenderIsSet(boolean value) {
    if (!value) {
      this.userGender = null;
    }
  }

  public String getUserEmail() {
    return this.userEmail;
  }

  public User setUserEmail(String userEmail) {
    this.userEmail = userEmail;
    return this;
  }

  public void unsetUserEmail() {
    this.userEmail = null;
  }

  /** Returns true if field userEmail is set (has been assigned a value) and false otherwise */
  public boolean isSetUserEmail() {
    return this.userEmail != null;
  }

  public void setUserEmailIsSet(boolean value) {
    if (!value) {
      this.userEmail = null;
    }
  }

  public String getUserRegisterTime() {
    return this.userRegisterTime;
  }

  public User setUserRegisterTime(String userRegisterTime) {
    this.userRegisterTime = userRegisterTime;
    return this;
  }

  public void unsetUserRegisterTime() {
    this.userRegisterTime = null;
  }

  /** Returns true if field userRegisterTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUserRegisterTime() {
    return this.userRegisterTime != null;
  }

  public void setUserRegisterTimeIsSet(boolean value) {
    if (!value) {
      this.userRegisterTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case USER_HOMETOWN:
      if (value == null) {
        unsetUserHometown();
      } else {
        setUserHometown((String)value);
      }
      break;

    case USER_SCHOOL:
      if (value == null) {
        unsetUserSchool();
      } else {
        setUserSchool((String)value);
      }
      break;

    case USER_BIRTHDAY:
      if (value == null) {
        unsetUserBirthday();
      } else {
        setUserBirthday((String)value);
      }
      break;

    case USER_GENDER:
      if (value == null) {
        unsetUserGender();
      } else {
        setUserGender((String)value);
      }
      break;

    case USER_EMAIL:
      if (value == null) {
        unsetUserEmail();
      } else {
        setUserEmail((String)value);
      }
      break;

    case USER_REGISTER_TIME:
      if (value == null) {
        unsetUserRegisterTime();
      } else {
        setUserRegisterTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return Integer.valueOf(getUserId());

    case USER_NAME:
      return getUserName();

    case USER_HOMETOWN:
      return getUserHometown();

    case USER_SCHOOL:
      return getUserSchool();

    case USER_BIRTHDAY:
      return getUserBirthday();

    case USER_GENDER:
      return getUserGender();

    case USER_EMAIL:
      return getUserEmail();

    case USER_REGISTER_TIME:
      return getUserRegisterTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case USER_HOMETOWN:
      return isSetUserHometown();
    case USER_SCHOOL:
      return isSetUserSchool();
    case USER_BIRTHDAY:
      return isSetUserBirthday();
    case USER_GENDER:
      return isSetUserGender();
    case USER_EMAIL:
      return isSetUserEmail();
    case USER_REGISTER_TIME:
      return isSetUserRegisterTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof User)
      return this.equals((User)that);
    return false;
  }

  public boolean equals(User that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_userHometown = true && this.isSetUserHometown();
    boolean that_present_userHometown = true && that.isSetUserHometown();
    if (this_present_userHometown || that_present_userHometown) {
      if (!(this_present_userHometown && that_present_userHometown))
        return false;
      if (!this.userHometown.equals(that.userHometown))
        return false;
    }

    boolean this_present_userSchool = true && this.isSetUserSchool();
    boolean that_present_userSchool = true && that.isSetUserSchool();
    if (this_present_userSchool || that_present_userSchool) {
      if (!(this_present_userSchool && that_present_userSchool))
        return false;
      if (!this.userSchool.equals(that.userSchool))
        return false;
    }

    boolean this_present_userBirthday = true && this.isSetUserBirthday();
    boolean that_present_userBirthday = true && that.isSetUserBirthday();
    if (this_present_userBirthday || that_present_userBirthday) {
      if (!(this_present_userBirthday && that_present_userBirthday))
        return false;
      if (!this.userBirthday.equals(that.userBirthday))
        return false;
    }

    boolean this_present_userGender = true && this.isSetUserGender();
    boolean that_present_userGender = true && that.isSetUserGender();
    if (this_present_userGender || that_present_userGender) {
      if (!(this_present_userGender && that_present_userGender))
        return false;
      if (!this.userGender.equals(that.userGender))
        return false;
    }

    boolean this_present_userEmail = true && this.isSetUserEmail();
    boolean that_present_userEmail = true && that.isSetUserEmail();
    if (this_present_userEmail || that_present_userEmail) {
      if (!(this_present_userEmail && that_present_userEmail))
        return false;
      if (!this.userEmail.equals(that.userEmail))
        return false;
    }

    boolean this_present_userRegisterTime = true && this.isSetUserRegisterTime();
    boolean that_present_userRegisterTime = true && that.isSetUserRegisterTime();
    if (this_present_userRegisterTime || that_present_userRegisterTime) {
      if (!(this_present_userRegisterTime && that_present_userRegisterTime))
        return false;
      if (!this.userRegisterTime.equals(that.userRegisterTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(User other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    User typedOther = (User)other;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(typedOther.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, typedOther.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserHometown()).compareTo(typedOther.isSetUserHometown());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserHometown()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userHometown, typedOther.userHometown);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserSchool()).compareTo(typedOther.isSetUserSchool());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserSchool()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userSchool, typedOther.userSchool);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserBirthday()).compareTo(typedOther.isSetUserBirthday());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserBirthday()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userBirthday, typedOther.userBirthday);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserGender()).compareTo(typedOther.isSetUserGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userGender, typedOther.userGender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserEmail()).compareTo(typedOther.isSetUserEmail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserEmail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userEmail, typedOther.userEmail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserRegisterTime()).compareTo(typedOther.isSetUserRegisterTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserRegisterTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userRegisterTime, typedOther.userRegisterTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("User(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userHometown:");
    if (this.userHometown == null) {
      sb.append("null");
    } else {
      sb.append(this.userHometown);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userSchool:");
    if (this.userSchool == null) {
      sb.append("null");
    } else {
      sb.append(this.userSchool);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userBirthday:");
    if (this.userBirthday == null) {
      sb.append("null");
    } else {
      sb.append(this.userBirthday);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userGender:");
    if (this.userGender == null) {
      sb.append("null");
    } else {
      sb.append(this.userGender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userEmail:");
    if (this.userEmail == null) {
      sb.append("null");
    } else {
      sb.append(this.userEmail);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userRegisterTime:");
    if (this.userRegisterTime == null) {
      sb.append("null");
    } else {
      sb.append(this.userRegisterTime);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bit_vector = new BitSet(1);
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class UserStandardSchemeFactory implements SchemeFactory {
    public UserStandardScheme getScheme() {
      return new UserStandardScheme();
    }
  }

  private static class UserStandardScheme extends StandardScheme<User> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, User struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_HOMETOWN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userHometown = iprot.readString();
              struct.setUserHometownIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_SCHOOL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userSchool = iprot.readString();
              struct.setUserSchoolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_BIRTHDAY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userBirthday = iprot.readString();
              struct.setUserBirthdayIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userGender = iprot.readString();
              struct.setUserGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USER_EMAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userEmail = iprot.readString();
              struct.setUserEmailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USER_REGISTER_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userRegisterTime = iprot.readString();
              struct.setUserRegisterTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, User struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.userHometown != null) {
        oprot.writeFieldBegin(USER_HOMETOWN_FIELD_DESC);
        oprot.writeString(struct.userHometown);
        oprot.writeFieldEnd();
      }
      if (struct.userSchool != null) {
        oprot.writeFieldBegin(USER_SCHOOL_FIELD_DESC);
        oprot.writeString(struct.userSchool);
        oprot.writeFieldEnd();
      }
      if (struct.userBirthday != null) {
        oprot.writeFieldBegin(USER_BIRTHDAY_FIELD_DESC);
        oprot.writeString(struct.userBirthday);
        oprot.writeFieldEnd();
      }
      if (struct.userGender != null) {
        oprot.writeFieldBegin(USER_GENDER_FIELD_DESC);
        oprot.writeString(struct.userGender);
        oprot.writeFieldEnd();
      }
      if (struct.userEmail != null) {
        oprot.writeFieldBegin(USER_EMAIL_FIELD_DESC);
        oprot.writeString(struct.userEmail);
        oprot.writeFieldEnd();
      }
      if (struct.userRegisterTime != null) {
        oprot.writeFieldBegin(USER_REGISTER_TIME_FIELD_DESC);
        oprot.writeString(struct.userRegisterTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class UserTupleSchemeFactory implements SchemeFactory {
    public UserTupleScheme getScheme() {
      return new UserTupleScheme();
    }
  }

  private static class UserTupleScheme extends TupleScheme<User> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetUserHometown()) {
        optionals.set(2);
      }
      if (struct.isSetUserSchool()) {
        optionals.set(3);
      }
      if (struct.isSetUserBirthday()) {
        optionals.set(4);
      }
      if (struct.isSetUserGender()) {
        optionals.set(5);
      }
      if (struct.isSetUserEmail()) {
        optionals.set(6);
      }
      if (struct.isSetUserRegisterTime()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals);
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetUserHometown()) {
        oprot.writeString(struct.userHometown);
      }
      if (struct.isSetUserSchool()) {
        oprot.writeString(struct.userSchool);
      }
      if (struct.isSetUserBirthday()) {
        oprot.writeString(struct.userBirthday);
      }
      if (struct.isSetUserGender()) {
        oprot.writeString(struct.userGender);
      }
      if (struct.isSetUserEmail()) {
        oprot.writeString(struct.userEmail);
      }
      if (struct.isSetUserRegisterTime()) {
        oprot.writeString(struct.userRegisterTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, User struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.userHometown = iprot.readString();
        struct.setUserHometownIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userSchool = iprot.readString();
        struct.setUserSchoolIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userBirthday = iprot.readString();
        struct.setUserBirthdayIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userGender = iprot.readString();
        struct.setUserGenderIsSet(true);
      }
      if (incoming.get(6)) {
        struct.userEmail = iprot.readString();
        struct.setUserEmailIsSet(true);
      }
      if (incoming.get(7)) {
        struct.userRegisterTime = iprot.readString();
        struct.setUserRegisterTimeIsSet(true);
      }
    }
  }

}

