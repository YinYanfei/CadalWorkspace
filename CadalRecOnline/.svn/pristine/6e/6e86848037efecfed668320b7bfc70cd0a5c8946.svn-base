/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.cadal.rec.ol.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RecAPI {

  public interface Iface {

    public List<Book> RecBookByUserName(String userName) throws org.apache.thrift.TException;

    public List<Book> RecBookByBook(String bookid) throws org.apache.thrift.TException;

    public List<Book> RecBookByUserTags(List<String> listTags) throws org.apache.thrift.TException;

    public List<String> RecTagsByUserName(String userName) throws org.apache.thrift.TException;

    public List<String> RecTagsByBook(String bookid) throws org.apache.thrift.TException;

    public List<String> RecTagsByUserTags(List<String> listTags) throws org.apache.thrift.TException;

    public List<User> RecUserByUserName(String userName) throws org.apache.thrift.TException;

    public List<User> RecUserByBook(String bookid) throws org.apache.thrift.TException;

    public List<User> RecUserByUserTags(List<String> listTags) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void RecBookByUserName(String userName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecBookByUserName_call> resultHandler) throws org.apache.thrift.TException;

    public void RecBookByBook(String bookid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecBookByBook_call> resultHandler) throws org.apache.thrift.TException;

    public void RecBookByUserTags(List<String> listTags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecBookByUserTags_call> resultHandler) throws org.apache.thrift.TException;

    public void RecTagsByUserName(String userName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecTagsByUserName_call> resultHandler) throws org.apache.thrift.TException;

    public void RecTagsByBook(String bookid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecTagsByBook_call> resultHandler) throws org.apache.thrift.TException;

    public void RecTagsByUserTags(List<String> listTags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecTagsByUserTags_call> resultHandler) throws org.apache.thrift.TException;

    public void RecUserByUserName(String userName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecUserByUserName_call> resultHandler) throws org.apache.thrift.TException;

    public void RecUserByBook(String bookid, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecUserByBook_call> resultHandler) throws org.apache.thrift.TException;

    public void RecUserByUserTags(List<String> listTags, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.RecUserByUserTags_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<Book> RecBookByUserName(String userName) throws org.apache.thrift.TException
    {
      send_RecBookByUserName(userName);
      return recv_RecBookByUserName();
    }

    public void send_RecBookByUserName(String userName) throws org.apache.thrift.TException
    {
      RecBookByUserName_args args = new RecBookByUserName_args();
      args.setUserName(userName);
      sendBase("RecBookByUserName", args);
    }

    public List<Book> recv_RecBookByUserName() throws org.apache.thrift.TException
    {
      RecBookByUserName_result result = new RecBookByUserName_result();
      receiveBase(result, "RecBookByUserName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecBookByUserName failed: unknown result");
    }

    public List<Book> RecBookByBook(String bookid) throws org.apache.thrift.TException
    {
      send_RecBookByBook(bookid);
      return recv_RecBookByBook();
    }

    public void send_RecBookByBook(String bookid) throws org.apache.thrift.TException
    {
      RecBookByBook_args args = new RecBookByBook_args();
      args.setBookid(bookid);
      sendBase("RecBookByBook", args);
    }

    public List<Book> recv_RecBookByBook() throws org.apache.thrift.TException
    {
      RecBookByBook_result result = new RecBookByBook_result();
      receiveBase(result, "RecBookByBook");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecBookByBook failed: unknown result");
    }

    public List<Book> RecBookByUserTags(List<String> listTags) throws org.apache.thrift.TException
    {
      send_RecBookByUserTags(listTags);
      return recv_RecBookByUserTags();
    }

    public void send_RecBookByUserTags(List<String> listTags) throws org.apache.thrift.TException
    {
      RecBookByUserTags_args args = new RecBookByUserTags_args();
      args.setListTags(listTags);
      sendBase("RecBookByUserTags", args);
    }

    public List<Book> recv_RecBookByUserTags() throws org.apache.thrift.TException
    {
      RecBookByUserTags_result result = new RecBookByUserTags_result();
      receiveBase(result, "RecBookByUserTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecBookByUserTags failed: unknown result");
    }

    public List<String> RecTagsByUserName(String userName) throws org.apache.thrift.TException
    {
      send_RecTagsByUserName(userName);
      return recv_RecTagsByUserName();
    }

    public void send_RecTagsByUserName(String userName) throws org.apache.thrift.TException
    {
      RecTagsByUserName_args args = new RecTagsByUserName_args();
      args.setUserName(userName);
      sendBase("RecTagsByUserName", args);
    }

    public List<String> recv_RecTagsByUserName() throws org.apache.thrift.TException
    {
      RecTagsByUserName_result result = new RecTagsByUserName_result();
      receiveBase(result, "RecTagsByUserName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecTagsByUserName failed: unknown result");
    }

    public List<String> RecTagsByBook(String bookid) throws org.apache.thrift.TException
    {
      send_RecTagsByBook(bookid);
      return recv_RecTagsByBook();
    }

    public void send_RecTagsByBook(String bookid) throws org.apache.thrift.TException
    {
      RecTagsByBook_args args = new RecTagsByBook_args();
      args.setBookid(bookid);
      sendBase("RecTagsByBook", args);
    }

    public List<String> recv_RecTagsByBook() throws org.apache.thrift.TException
    {
      RecTagsByBook_result result = new RecTagsByBook_result();
      receiveBase(result, "RecTagsByBook");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecTagsByBook failed: unknown result");
    }

    public List<String> RecTagsByUserTags(List<String> listTags) throws org.apache.thrift.TException
    {
      send_RecTagsByUserTags(listTags);
      return recv_RecTagsByUserTags();
    }

    public void send_RecTagsByUserTags(List<String> listTags) throws org.apache.thrift.TException
    {
      RecTagsByUserTags_args args = new RecTagsByUserTags_args();
      args.setListTags(listTags);
      sendBase("RecTagsByUserTags", args);
    }

    public List<String> recv_RecTagsByUserTags() throws org.apache.thrift.TException
    {
      RecTagsByUserTags_result result = new RecTagsByUserTags_result();
      receiveBase(result, "RecTagsByUserTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecTagsByUserTags failed: unknown result");
    }

    public List<User> RecUserByUserName(String userName) throws org.apache.thrift.TException
    {
      send_RecUserByUserName(userName);
      return recv_RecUserByUserName();
    }

    public void send_RecUserByUserName(String userName) throws org.apache.thrift.TException
    {
      RecUserByUserName_args args = new RecUserByUserName_args();
      args.setUserName(userName);
      sendBase("RecUserByUserName", args);
    }

    public List<User> recv_RecUserByUserName() throws org.apache.thrift.TException
    {
      RecUserByUserName_result result = new RecUserByUserName_result();
      receiveBase(result, "RecUserByUserName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecUserByUserName failed: unknown result");
    }

    public List<User> RecUserByBook(String bookid) throws org.apache.thrift.TException
    {
      send_RecUserByBook(bookid);
      return recv_RecUserByBook();
    }

    public void send_RecUserByBook(String bookid) throws org.apache.thrift.TException
    {
      RecUserByBook_args args = new RecUserByBook_args();
      args.setBookid(bookid);
      sendBase("RecUserByBook", args);
    }

    public List<User> recv_RecUserByBook() throws org.apache.thrift.TException
    {
      RecUserByBook_result result = new RecUserByBook_result();
      receiveBase(result, "RecUserByBook");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecUserByBook failed: unknown result");
    }

    public List<User> RecUserByUserTags(List<String> listTags) throws org.apache.thrift.TException
    {
      send_RecUserByUserTags(listTags);
      return recv_RecUserByUserTags();
    }

    public void send_RecUserByUserTags(List<String> listTags) throws org.apache.thrift.TException
    {
      RecUserByUserTags_args args = new RecUserByUserTags_args();
      args.setListTags(listTags);
      sendBase("RecUserByUserTags", args);
    }

    public List<User> recv_RecUserByUserTags() throws org.apache.thrift.TException
    {
      RecUserByUserTags_result result = new RecUserByUserTags_result();
      receiveBase(result, "RecUserByUserTags");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "RecUserByUserTags failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void RecBookByUserName(String userName, org.apache.thrift.async.AsyncMethodCallback<RecBookByUserName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecBookByUserName_call method_call = new RecBookByUserName_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecBookByUserName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public RecBookByUserName_call(String userName, org.apache.thrift.async.AsyncMethodCallback<RecBookByUserName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecBookByUserName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecBookByUserName_args args = new RecBookByUserName_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Book> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecBookByUserName();
      }
    }

    public void RecBookByBook(String bookid, org.apache.thrift.async.AsyncMethodCallback<RecBookByBook_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecBookByBook_call method_call = new RecBookByBook_call(bookid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecBookByBook_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bookid;
      public RecBookByBook_call(String bookid, org.apache.thrift.async.AsyncMethodCallback<RecBookByBook_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookid = bookid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecBookByBook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecBookByBook_args args = new RecBookByBook_args();
        args.setBookid(bookid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Book> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecBookByBook();
      }
    }

    public void RecBookByUserTags(List<String> listTags, org.apache.thrift.async.AsyncMethodCallback<RecBookByUserTags_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecBookByUserTags_call method_call = new RecBookByUserTags_call(listTags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecBookByUserTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> listTags;
      public RecBookByUserTags_call(List<String> listTags, org.apache.thrift.async.AsyncMethodCallback<RecBookByUserTags_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listTags = listTags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecBookByUserTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecBookByUserTags_args args = new RecBookByUserTags_args();
        args.setListTags(listTags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Book> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecBookByUserTags();
      }
    }

    public void RecTagsByUserName(String userName, org.apache.thrift.async.AsyncMethodCallback<RecTagsByUserName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecTagsByUserName_call method_call = new RecTagsByUserName_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecTagsByUserName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public RecTagsByUserName_call(String userName, org.apache.thrift.async.AsyncMethodCallback<RecTagsByUserName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecTagsByUserName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecTagsByUserName_args args = new RecTagsByUserName_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecTagsByUserName();
      }
    }

    public void RecTagsByBook(String bookid, org.apache.thrift.async.AsyncMethodCallback<RecTagsByBook_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecTagsByBook_call method_call = new RecTagsByBook_call(bookid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecTagsByBook_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bookid;
      public RecTagsByBook_call(String bookid, org.apache.thrift.async.AsyncMethodCallback<RecTagsByBook_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookid = bookid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecTagsByBook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecTagsByBook_args args = new RecTagsByBook_args();
        args.setBookid(bookid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecTagsByBook();
      }
    }

    public void RecTagsByUserTags(List<String> listTags, org.apache.thrift.async.AsyncMethodCallback<RecTagsByUserTags_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecTagsByUserTags_call method_call = new RecTagsByUserTags_call(listTags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecTagsByUserTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> listTags;
      public RecTagsByUserTags_call(List<String> listTags, org.apache.thrift.async.AsyncMethodCallback<RecTagsByUserTags_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listTags = listTags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecTagsByUserTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecTagsByUserTags_args args = new RecTagsByUserTags_args();
        args.setListTags(listTags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<String> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecTagsByUserTags();
      }
    }

    public void RecUserByUserName(String userName, org.apache.thrift.async.AsyncMethodCallback<RecUserByUserName_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecUserByUserName_call method_call = new RecUserByUserName_call(userName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecUserByUserName_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userName;
      public RecUserByUserName_call(String userName, org.apache.thrift.async.AsyncMethodCallback<RecUserByUserName_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userName = userName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecUserByUserName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecUserByUserName_args args = new RecUserByUserName_args();
        args.setUserName(userName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<User> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecUserByUserName();
      }
    }

    public void RecUserByBook(String bookid, org.apache.thrift.async.AsyncMethodCallback<RecUserByBook_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecUserByBook_call method_call = new RecUserByBook_call(bookid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecUserByBook_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String bookid;
      public RecUserByBook_call(String bookid, org.apache.thrift.async.AsyncMethodCallback<RecUserByBook_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bookid = bookid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecUserByBook", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecUserByBook_args args = new RecUserByBook_args();
        args.setBookid(bookid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<User> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecUserByBook();
      }
    }

    public void RecUserByUserTags(List<String> listTags, org.apache.thrift.async.AsyncMethodCallback<RecUserByUserTags_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      RecUserByUserTags_call method_call = new RecUserByUserTags_call(listTags, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class RecUserByUserTags_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> listTags;
      public RecUserByUserTags_call(List<String> listTags, org.apache.thrift.async.AsyncMethodCallback<RecUserByUserTags_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listTags = listTags;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("RecUserByUserTags", org.apache.thrift.protocol.TMessageType.CALL, 0));
        RecUserByUserTags_args args = new RecUserByUserTags_args();
        args.setListTags(listTags);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<User> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_RecUserByUserTags();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("RecBookByUserName", new RecBookByUserName());
      processMap.put("RecBookByBook", new RecBookByBook());
      processMap.put("RecBookByUserTags", new RecBookByUserTags());
      processMap.put("RecTagsByUserName", new RecTagsByUserName());
      processMap.put("RecTagsByBook", new RecTagsByBook());
      processMap.put("RecTagsByUserTags", new RecTagsByUserTags());
      processMap.put("RecUserByUserName", new RecUserByUserName());
      processMap.put("RecUserByBook", new RecUserByBook());
      processMap.put("RecUserByUserTags", new RecUserByUserTags());
      return processMap;
    }

    private static class RecBookByUserName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecBookByUserName_args> {
      public RecBookByUserName() {
        super("RecBookByUserName");
      }

      protected RecBookByUserName_args getEmptyArgsInstance() {
        return new RecBookByUserName_args();
      }

      protected RecBookByUserName_result getResult(I iface, RecBookByUserName_args args) throws org.apache.thrift.TException {
        RecBookByUserName_result result = new RecBookByUserName_result();
        result.success = iface.RecBookByUserName(args.userName);
        return result;
      }
    }

    private static class RecBookByBook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecBookByBook_args> {
      public RecBookByBook() {
        super("RecBookByBook");
      }

      protected RecBookByBook_args getEmptyArgsInstance() {
        return new RecBookByBook_args();
      }

      protected RecBookByBook_result getResult(I iface, RecBookByBook_args args) throws org.apache.thrift.TException {
        RecBookByBook_result result = new RecBookByBook_result();
        result.success = iface.RecBookByBook(args.bookid);
        return result;
      }
    }

    private static class RecBookByUserTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecBookByUserTags_args> {
      public RecBookByUserTags() {
        super("RecBookByUserTags");
      }

      protected RecBookByUserTags_args getEmptyArgsInstance() {
        return new RecBookByUserTags_args();
      }

      protected RecBookByUserTags_result getResult(I iface, RecBookByUserTags_args args) throws org.apache.thrift.TException {
        RecBookByUserTags_result result = new RecBookByUserTags_result();
        result.success = iface.RecBookByUserTags(args.listTags);
        return result;
      }
    }

    private static class RecTagsByUserName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecTagsByUserName_args> {
      public RecTagsByUserName() {
        super("RecTagsByUserName");
      }

      protected RecTagsByUserName_args getEmptyArgsInstance() {
        return new RecTagsByUserName_args();
      }

      protected RecTagsByUserName_result getResult(I iface, RecTagsByUserName_args args) throws org.apache.thrift.TException {
        RecTagsByUserName_result result = new RecTagsByUserName_result();
        result.success = iface.RecTagsByUserName(args.userName);
        return result;
      }
    }

    private static class RecTagsByBook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecTagsByBook_args> {
      public RecTagsByBook() {
        super("RecTagsByBook");
      }

      protected RecTagsByBook_args getEmptyArgsInstance() {
        return new RecTagsByBook_args();
      }

      protected RecTagsByBook_result getResult(I iface, RecTagsByBook_args args) throws org.apache.thrift.TException {
        RecTagsByBook_result result = new RecTagsByBook_result();
        result.success = iface.RecTagsByBook(args.bookid);
        return result;
      }
    }

    private static class RecTagsByUserTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecTagsByUserTags_args> {
      public RecTagsByUserTags() {
        super("RecTagsByUserTags");
      }

      protected RecTagsByUserTags_args getEmptyArgsInstance() {
        return new RecTagsByUserTags_args();
      }

      protected RecTagsByUserTags_result getResult(I iface, RecTagsByUserTags_args args) throws org.apache.thrift.TException {
        RecTagsByUserTags_result result = new RecTagsByUserTags_result();
        result.success = iface.RecTagsByUserTags(args.listTags);
        return result;
      }
    }

    private static class RecUserByUserName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecUserByUserName_args> {
      public RecUserByUserName() {
        super("RecUserByUserName");
      }

      protected RecUserByUserName_args getEmptyArgsInstance() {
        return new RecUserByUserName_args();
      }

      protected RecUserByUserName_result getResult(I iface, RecUserByUserName_args args) throws org.apache.thrift.TException {
        RecUserByUserName_result result = new RecUserByUserName_result();
        result.success = iface.RecUserByUserName(args.userName);
        return result;
      }
    }

    private static class RecUserByBook<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecUserByBook_args> {
      public RecUserByBook() {
        super("RecUserByBook");
      }

      protected RecUserByBook_args getEmptyArgsInstance() {
        return new RecUserByBook_args();
      }

      protected RecUserByBook_result getResult(I iface, RecUserByBook_args args) throws org.apache.thrift.TException {
        RecUserByBook_result result = new RecUserByBook_result();
        result.success = iface.RecUserByBook(args.bookid);
        return result;
      }
    }

    private static class RecUserByUserTags<I extends Iface> extends org.apache.thrift.ProcessFunction<I, RecUserByUserTags_args> {
      public RecUserByUserTags() {
        super("RecUserByUserTags");
      }

      protected RecUserByUserTags_args getEmptyArgsInstance() {
        return new RecUserByUserTags_args();
      }

      protected RecUserByUserTags_result getResult(I iface, RecUserByUserTags_args args) throws org.apache.thrift.TException {
        RecUserByUserTags_result result = new RecUserByUserTags_result();
        result.success = iface.RecUserByUserTags(args.listTags);
        return result;
      }
    }

  }

  public static class RecBookByUserName_args implements org.apache.thrift.TBase<RecBookByUserName_args, RecBookByUserName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecBookByUserName_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecBookByUserName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecBookByUserName_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecBookByUserName_args.class, metaDataMap);
    }

    public RecBookByUserName_args() {
    }

    public RecBookByUserName_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecBookByUserName_args(RecBookByUserName_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public RecBookByUserName_args deepCopy() {
      return new RecBookByUserName_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public RecBookByUserName_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecBookByUserName_args)
        return this.equals((RecBookByUserName_args)that);
      return false;
    }

    public boolean equals(RecBookByUserName_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecBookByUserName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecBookByUserName_args typedOther = (RecBookByUserName_args)other;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecBookByUserName_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecBookByUserName_argsStandardSchemeFactory implements SchemeFactory {
      public RecBookByUserName_argsStandardScheme getScheme() {
        return new RecBookByUserName_argsStandardScheme();
      }
    }

    private static class RecBookByUserName_argsStandardScheme extends StandardScheme<RecBookByUserName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecBookByUserName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecBookByUserName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecBookByUserName_argsTupleSchemeFactory implements SchemeFactory {
      public RecBookByUserName_argsTupleScheme getScheme() {
        return new RecBookByUserName_argsTupleScheme();
      }
    }

    private static class RecBookByUserName_argsTupleScheme extends TupleScheme<RecBookByUserName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecBookByUserName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecBookByUserName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
      }
    }

  }

  public static class RecBookByUserName_result implements org.apache.thrift.TBase<RecBookByUserName_result, RecBookByUserName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecBookByUserName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecBookByUserName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecBookByUserName_resultTupleSchemeFactory());
    }

    public List<Book> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Book.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecBookByUserName_result.class, metaDataMap);
    }

    public RecBookByUserName_result() {
    }

    public RecBookByUserName_result(
      List<Book> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecBookByUserName_result(RecBookByUserName_result other) {
      if (other.isSetSuccess()) {
        List<Book> __this__success = new ArrayList<Book>();
        for (Book other_element : other.success) {
          __this__success.add(new Book(other_element));
        }
        this.success = __this__success;
      }
    }

    public RecBookByUserName_result deepCopy() {
      return new RecBookByUserName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Book> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Book elem) {
      if (this.success == null) {
        this.success = new ArrayList<Book>();
      }
      this.success.add(elem);
    }

    public List<Book> getSuccess() {
      return this.success;
    }

    public RecBookByUserName_result setSuccess(List<Book> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Book>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecBookByUserName_result)
        return this.equals((RecBookByUserName_result)that);
      return false;
    }

    public boolean equals(RecBookByUserName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecBookByUserName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecBookByUserName_result typedOther = (RecBookByUserName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecBookByUserName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecBookByUserName_resultStandardSchemeFactory implements SchemeFactory {
      public RecBookByUserName_resultStandardScheme getScheme() {
        return new RecBookByUserName_resultStandardScheme();
      }
    }

    private static class RecBookByUserName_resultStandardScheme extends StandardScheme<RecBookByUserName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecBookByUserName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Book>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    Book _elem2; // required
                    _elem2 = new Book();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecBookByUserName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Book _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecBookByUserName_resultTupleSchemeFactory implements SchemeFactory {
      public RecBookByUserName_resultTupleScheme getScheme() {
        return new RecBookByUserName_resultTupleScheme();
      }
    }

    private static class RecBookByUserName_resultTupleScheme extends TupleScheme<RecBookByUserName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecBookByUserName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Book _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecBookByUserName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Book>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              Book _elem7; // required
              _elem7 = new Book();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecBookByBook_args implements org.apache.thrift.TBase<RecBookByBook_args, RecBookByBook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecBookByBook_args");

    private static final org.apache.thrift.protocol.TField BOOKID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecBookByBook_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecBookByBook_argsTupleSchemeFactory());
    }

    public String bookid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKID((short)1, "bookid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKID
            return BOOKID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName; 

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKID, new org.apache.thrift.meta_data.FieldMetaData("bookid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecBookByBook_args.class, metaDataMap);
    }

    public RecBookByBook_args() {
    }

    public RecBookByBook_args(
      String bookid)
    {
      this();
      this.bookid = bookid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecBookByBook_args(RecBookByBook_args other) {
      if (other.isSetBookid()) {
        this.bookid = other.bookid;
      }
    }

    public RecBookByBook_args deepCopy() {
      return new RecBookByBook_args(this);
    }

    @Override
    public void clear() {
      this.bookid = null;
    }

    public String getBookid() {
      return this.bookid;
    }

    public RecBookByBook_args setBookid(String bookid) {
      this.bookid = bookid;
      return this;
    }

    public void unsetBookid() {
      this.bookid = null;
    }

    /** Returns true if field bookid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookid() {
      return this.bookid != null;
    }

    public void setBookidIsSet(boolean value) {
      if (!value) {
        this.bookid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKID:
        if (value == null) {
          unsetBookid();
        } else {
          setBookid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKID:
        return getBookid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKID:
        return isSetBookid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecBookByBook_args)
        return this.equals((RecBookByBook_args)that);
      return false;
    }

    public boolean equals(RecBookByBook_args that) {
      if (that == null)
        return false;

      boolean this_present_bookid = true && this.isSetBookid();
      boolean that_present_bookid = true && that.isSetBookid();
      if (this_present_bookid || that_present_bookid) {
        if (!(this_present_bookid && that_present_bookid))
          return false;
        if (!this.bookid.equals(that.bookid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecBookByBook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecBookByBook_args typedOther = (RecBookByBook_args)other;

      lastComparison = Boolean.valueOf(isSetBookid()).compareTo(typedOther.isSetBookid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookid, typedOther.bookid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecBookByBook_args(");
      boolean first = true;

      sb.append("bookid:");
      if (this.bookid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecBookByBook_argsStandardSchemeFactory implements SchemeFactory {
      public RecBookByBook_argsStandardScheme getScheme() {
        return new RecBookByBook_argsStandardScheme();
      }
    }

    private static class RecBookByBook_argsStandardScheme extends StandardScheme<RecBookByBook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecBookByBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookid = iprot.readString();
                struct.setBookidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecBookByBook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookid != null) {
          oprot.writeFieldBegin(BOOKID_FIELD_DESC);
          oprot.writeString(struct.bookid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecBookByBook_argsTupleSchemeFactory implements SchemeFactory {
      public RecBookByBook_argsTupleScheme getScheme() {
        return new RecBookByBook_argsTupleScheme();
      }
    }

    private static class RecBookByBook_argsTupleScheme extends TupleScheme<RecBookByBook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecBookByBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetBookid()) {
          oprot.writeString(struct.bookid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecBookByBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bookid = iprot.readString();
          struct.setBookidIsSet(true);
        }
      }
    }

  }

  public static class RecBookByBook_result implements org.apache.thrift.TBase<RecBookByBook_result, RecBookByBook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecBookByBook_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecBookByBook_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecBookByBook_resultTupleSchemeFactory());
    }

    public List<Book> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Book.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecBookByBook_result.class, metaDataMap);
    }

    public RecBookByBook_result() {
    }

    public RecBookByBook_result(
      List<Book> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecBookByBook_result(RecBookByBook_result other) {
      if (other.isSetSuccess()) {
        List<Book> __this__success = new ArrayList<Book>();
        for (Book other_element : other.success) {
          __this__success.add(new Book(other_element));
        }
        this.success = __this__success;
      }
    }

    public RecBookByBook_result deepCopy() {
      return new RecBookByBook_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Book> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Book elem) {
      if (this.success == null) {
        this.success = new ArrayList<Book>();
      }
      this.success.add(elem);
    }

    public List<Book> getSuccess() {
      return this.success;
    }

    public RecBookByBook_result setSuccess(List<Book> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Book>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecBookByBook_result)
        return this.equals((RecBookByBook_result)that);
      return false;
    }

    public boolean equals(RecBookByBook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecBookByBook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecBookByBook_result typedOther = (RecBookByBook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecBookByBook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecBookByBook_resultStandardSchemeFactory implements SchemeFactory {
      public RecBookByBook_resultStandardScheme getScheme() {
        return new RecBookByBook_resultStandardScheme();
      }
    }

    private static class RecBookByBook_resultStandardScheme extends StandardScheme<RecBookByBook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecBookByBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Book>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Book _elem10; // required
                    _elem10 = new Book();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecBookByBook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Book _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecBookByBook_resultTupleSchemeFactory implements SchemeFactory {
      public RecBookByBook_resultTupleScheme getScheme() {
        return new RecBookByBook_resultTupleScheme();
      }
    }

    private static class RecBookByBook_resultTupleScheme extends TupleScheme<RecBookByBook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecBookByBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Book _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecBookByBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Book>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Book _elem15; // required
              _elem15 = new Book();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecBookByUserTags_args implements org.apache.thrift.TBase<RecBookByUserTags_args, RecBookByUserTags_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecBookByUserTags_args");

    private static final org.apache.thrift.protocol.TField LIST_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("listTags", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecBookByUserTags_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecBookByUserTags_argsTupleSchemeFactory());
    }

    public List<String> listTags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_TAGS((short)1, "listTags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_TAGS
            return LIST_TAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_TAGS, new org.apache.thrift.meta_data.FieldMetaData("listTags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecBookByUserTags_args.class, metaDataMap);
    }

    public RecBookByUserTags_args() {
    }

    public RecBookByUserTags_args(
      List<String> listTags)
    {
      this();
      this.listTags = listTags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecBookByUserTags_args(RecBookByUserTags_args other) {
      if (other.isSetListTags()) {
        List<String> __this__listTags = new ArrayList<String>();
        for (String other_element : other.listTags) {
          __this__listTags.add(other_element);
        }
        this.listTags = __this__listTags;
      }
    }

    public RecBookByUserTags_args deepCopy() {
      return new RecBookByUserTags_args(this);
    }

    @Override
    public void clear() {
      this.listTags = null;
    }

    public int getListTagsSize() {
      return (this.listTags == null) ? 0 : this.listTags.size();
    }

    public java.util.Iterator<String> getListTagsIterator() {
      return (this.listTags == null) ? null : this.listTags.iterator();
    }

    public void addToListTags(String elem) {
      if (this.listTags == null) {
        this.listTags = new ArrayList<String>();
      }
      this.listTags.add(elem);
    }

    public List<String> getListTags() {
      return this.listTags;
    }

    public RecBookByUserTags_args setListTags(List<String> listTags) {
      this.listTags = listTags;
      return this;
    }

    public void unsetListTags() {
      this.listTags = null;
    }

    /** Returns true if field listTags is set (has been assigned a value) and false otherwise */
    public boolean isSetListTags() {
      return this.listTags != null;
    }

    public void setListTagsIsSet(boolean value) {
      if (!value) {
        this.listTags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_TAGS:
        if (value == null) {
          unsetListTags();
        } else {
          setListTags((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_TAGS:
        return getListTags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_TAGS:
        return isSetListTags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecBookByUserTags_args)
        return this.equals((RecBookByUserTags_args)that);
      return false;
    }

    public boolean equals(RecBookByUserTags_args that) {
      if (that == null)
        return false;

      boolean this_present_listTags = true && this.isSetListTags();
      boolean that_present_listTags = true && that.isSetListTags();
      if (this_present_listTags || that_present_listTags) {
        if (!(this_present_listTags && that_present_listTags))
          return false;
        if (!this.listTags.equals(that.listTags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecBookByUserTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecBookByUserTags_args typedOther = (RecBookByUserTags_args)other;

      lastComparison = Boolean.valueOf(isSetListTags()).compareTo(typedOther.isSetListTags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListTags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listTags, typedOther.listTags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecBookByUserTags_args(");
      boolean first = true;

      sb.append("listTags:");
      if (this.listTags == null) {
        sb.append("null");
      } else {
        sb.append(this.listTags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecBookByUserTags_argsStandardSchemeFactory implements SchemeFactory {
      public RecBookByUserTags_argsStandardScheme getScheme() {
        return new RecBookByUserTags_argsStandardScheme();
      }
    }

    private static class RecBookByUserTags_argsStandardScheme extends StandardScheme<RecBookByUserTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecBookByUserTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_TAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.listTags = new ArrayList<String>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    String _elem18; // required
                    _elem18 = iprot.readString();
                    struct.listTags.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setListTagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecBookByUserTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listTags != null) {
          oprot.writeFieldBegin(LIST_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listTags.size()));
            for (String _iter19 : struct.listTags)
            {
              oprot.writeString(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecBookByUserTags_argsTupleSchemeFactory implements SchemeFactory {
      public RecBookByUserTags_argsTupleScheme getScheme() {
        return new RecBookByUserTags_argsTupleScheme();
      }
    }

    private static class RecBookByUserTags_argsTupleScheme extends TupleScheme<RecBookByUserTags_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecBookByUserTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListTags()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetListTags()) {
          {
            oprot.writeI32(struct.listTags.size());
            for (String _iter20 : struct.listTags)
            {
              oprot.writeString(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecBookByUserTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.listTags = new ArrayList<String>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              String _elem23; // required
              _elem23 = iprot.readString();
              struct.listTags.add(_elem23);
            }
          }
          struct.setListTagsIsSet(true);
        }
      }
    }

  }

  public static class RecBookByUserTags_result implements org.apache.thrift.TBase<RecBookByUserTags_result, RecBookByUserTags_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecBookByUserTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecBookByUserTags_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecBookByUserTags_resultTupleSchemeFactory());
    }

    public List<Book> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Book.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecBookByUserTags_result.class, metaDataMap);
    }

    public RecBookByUserTags_result() {
    }

    public RecBookByUserTags_result(
      List<Book> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecBookByUserTags_result(RecBookByUserTags_result other) {
      if (other.isSetSuccess()) {
        List<Book> __this__success = new ArrayList<Book>();
        for (Book other_element : other.success) {
          __this__success.add(new Book(other_element));
        }
        this.success = __this__success;
      }
    }

    public RecBookByUserTags_result deepCopy() {
      return new RecBookByUserTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Book> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Book elem) {
      if (this.success == null) {
        this.success = new ArrayList<Book>();
      }
      this.success.add(elem);
    }

    public List<Book> getSuccess() {
      return this.success;
    }

    public RecBookByUserTags_result setSuccess(List<Book> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Book>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecBookByUserTags_result)
        return this.equals((RecBookByUserTags_result)that);
      return false;
    }

    public boolean equals(RecBookByUserTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecBookByUserTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecBookByUserTags_result typedOther = (RecBookByUserTags_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecBookByUserTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecBookByUserTags_resultStandardSchemeFactory implements SchemeFactory {
      public RecBookByUserTags_resultStandardScheme getScheme() {
        return new RecBookByUserTags_resultStandardScheme();
      }
    }

    private static class RecBookByUserTags_resultStandardScheme extends StandardScheme<RecBookByUserTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecBookByUserTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<Book>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    Book _elem26; // required
                    _elem26 = new Book();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecBookByUserTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Book _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecBookByUserTags_resultTupleSchemeFactory implements SchemeFactory {
      public RecBookByUserTags_resultTupleScheme getScheme() {
        return new RecBookByUserTags_resultTupleScheme();
      }
    }

    private static class RecBookByUserTags_resultTupleScheme extends TupleScheme<RecBookByUserTags_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecBookByUserTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Book _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecBookByUserTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Book>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              Book _elem31; // required
              _elem31 = new Book();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecTagsByUserName_args implements org.apache.thrift.TBase<RecTagsByUserName_args, RecTagsByUserName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecTagsByUserName_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecTagsByUserName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecTagsByUserName_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecTagsByUserName_args.class, metaDataMap);
    }

    public RecTagsByUserName_args() {
    }

    public RecTagsByUserName_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecTagsByUserName_args(RecTagsByUserName_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public RecTagsByUserName_args deepCopy() {
      return new RecTagsByUserName_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public RecTagsByUserName_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecTagsByUserName_args)
        return this.equals((RecTagsByUserName_args)that);
      return false;
    }

    public boolean equals(RecTagsByUserName_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecTagsByUserName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecTagsByUserName_args typedOther = (RecTagsByUserName_args)other;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecTagsByUserName_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecTagsByUserName_argsStandardSchemeFactory implements SchemeFactory {
      public RecTagsByUserName_argsStandardScheme getScheme() {
        return new RecTagsByUserName_argsStandardScheme();
      }
    }

    private static class RecTagsByUserName_argsStandardScheme extends StandardScheme<RecTagsByUserName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecTagsByUserName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecTagsByUserName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecTagsByUserName_argsTupleSchemeFactory implements SchemeFactory {
      public RecTagsByUserName_argsTupleScheme getScheme() {
        return new RecTagsByUserName_argsTupleScheme();
      }
    }

    private static class RecTagsByUserName_argsTupleScheme extends TupleScheme<RecTagsByUserName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecTagsByUserName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecTagsByUserName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
      }
    }

  }

  public static class RecTagsByUserName_result implements org.apache.thrift.TBase<RecTagsByUserName_result, RecTagsByUserName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecTagsByUserName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecTagsByUserName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecTagsByUserName_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecTagsByUserName_result.class, metaDataMap);
    }

    public RecTagsByUserName_result() {
    }

    public RecTagsByUserName_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecTagsByUserName_result(RecTagsByUserName_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public RecTagsByUserName_result deepCopy() {
      return new RecTagsByUserName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public RecTagsByUserName_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecTagsByUserName_result)
        return this.equals((RecTagsByUserName_result)that);
      return false;
    }

    public boolean equals(RecTagsByUserName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecTagsByUserName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecTagsByUserName_result typedOther = (RecTagsByUserName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecTagsByUserName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecTagsByUserName_resultStandardSchemeFactory implements SchemeFactory {
      public RecTagsByUserName_resultStandardScheme getScheme() {
        return new RecTagsByUserName_resultStandardScheme();
      }
    }

    private static class RecTagsByUserName_resultStandardScheme extends StandardScheme<RecTagsByUserName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecTagsByUserName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    String _elem34; // required
                    _elem34 = iprot.readString();
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecTagsByUserName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter35 : struct.success)
            {
              oprot.writeString(_iter35);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecTagsByUserName_resultTupleSchemeFactory implements SchemeFactory {
      public RecTagsByUserName_resultTupleScheme getScheme() {
        return new RecTagsByUserName_resultTupleScheme();
      }
    }

    private static class RecTagsByUserName_resultTupleScheme extends TupleScheme<RecTagsByUserName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecTagsByUserName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter36 : struct.success)
            {
              oprot.writeString(_iter36);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecTagsByUserName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              String _elem39; // required
              _elem39 = iprot.readString();
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecTagsByBook_args implements org.apache.thrift.TBase<RecTagsByBook_args, RecTagsByBook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecTagsByBook_args");

    private static final org.apache.thrift.protocol.TField BOOKID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecTagsByBook_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecTagsByBook_argsTupleSchemeFactory());
    }

    public String bookid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKID((short)1, "bookid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKID
            return BOOKID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKID, new org.apache.thrift.meta_data.FieldMetaData("bookid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecTagsByBook_args.class, metaDataMap);
    }

    public RecTagsByBook_args() {
    }

    public RecTagsByBook_args(
      String bookid)
    {
      this();
      this.bookid = bookid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecTagsByBook_args(RecTagsByBook_args other) {
      if (other.isSetBookid()) {
        this.bookid = other.bookid;
      }
    }

    public RecTagsByBook_args deepCopy() {
      return new RecTagsByBook_args(this);
    }

    @Override
    public void clear() {
      this.bookid = null;
    }

    public String getBookid() {
      return this.bookid;
    }

    public RecTagsByBook_args setBookid(String bookid) {
      this.bookid = bookid;
      return this;
    }

    public void unsetBookid() {
      this.bookid = null;
    }

    /** Returns true if field bookid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookid() {
      return this.bookid != null;
    }

    public void setBookidIsSet(boolean value) {
      if (!value) {
        this.bookid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKID:
        if (value == null) {
          unsetBookid();
        } else {
          setBookid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKID:
        return getBookid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKID:
        return isSetBookid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecTagsByBook_args)
        return this.equals((RecTagsByBook_args)that);
      return false;
    }

    public boolean equals(RecTagsByBook_args that) {
      if (that == null)
        return false;

      boolean this_present_bookid = true && this.isSetBookid();
      boolean that_present_bookid = true && that.isSetBookid();
      if (this_present_bookid || that_present_bookid) {
        if (!(this_present_bookid && that_present_bookid))
          return false;
        if (!this.bookid.equals(that.bookid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecTagsByBook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecTagsByBook_args typedOther = (RecTagsByBook_args)other;

      lastComparison = Boolean.valueOf(isSetBookid()).compareTo(typedOther.isSetBookid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookid, typedOther.bookid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecTagsByBook_args(");
      boolean first = true;

      sb.append("bookid:");
      if (this.bookid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecTagsByBook_argsStandardSchemeFactory implements SchemeFactory {
      public RecTagsByBook_argsStandardScheme getScheme() {
        return new RecTagsByBook_argsStandardScheme();
      }
    }

    private static class RecTagsByBook_argsStandardScheme extends StandardScheme<RecTagsByBook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecTagsByBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookid = iprot.readString();
                struct.setBookidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecTagsByBook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookid != null) {
          oprot.writeFieldBegin(BOOKID_FIELD_DESC);
          oprot.writeString(struct.bookid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecTagsByBook_argsTupleSchemeFactory implements SchemeFactory {
      public RecTagsByBook_argsTupleScheme getScheme() {
        return new RecTagsByBook_argsTupleScheme();
      }
    }

    private static class RecTagsByBook_argsTupleScheme extends TupleScheme<RecTagsByBook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecTagsByBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetBookid()) {
          oprot.writeString(struct.bookid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecTagsByBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bookid = iprot.readString();
          struct.setBookidIsSet(true);
        }
      }
    }

  }

  public static class RecTagsByBook_result implements org.apache.thrift.TBase<RecTagsByBook_result, RecTagsByBook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecTagsByBook_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecTagsByBook_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecTagsByBook_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecTagsByBook_result.class, metaDataMap);
    }

    public RecTagsByBook_result() {
    }

    public RecTagsByBook_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecTagsByBook_result(RecTagsByBook_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public RecTagsByBook_result deepCopy() {
      return new RecTagsByBook_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public RecTagsByBook_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecTagsByBook_result)
        return this.equals((RecTagsByBook_result)that);
      return false;
    }

    public boolean equals(RecTagsByBook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecTagsByBook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecTagsByBook_result typedOther = (RecTagsByBook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecTagsByBook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecTagsByBook_resultStandardSchemeFactory implements SchemeFactory {
      public RecTagsByBook_resultStandardScheme getScheme() {
        return new RecTagsByBook_resultStandardScheme();
      }
    }

    private static class RecTagsByBook_resultStandardScheme extends StandardScheme<RecTagsByBook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecTagsByBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    String _elem42; // required
                    _elem42 = iprot.readString();
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecTagsByBook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter43 : struct.success)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecTagsByBook_resultTupleSchemeFactory implements SchemeFactory {
      public RecTagsByBook_resultTupleScheme getScheme() {
        return new RecTagsByBook_resultTupleScheme();
      }
    }

    private static class RecTagsByBook_resultTupleScheme extends TupleScheme<RecTagsByBook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecTagsByBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter44 : struct.success)
            {
              oprot.writeString(_iter44);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecTagsByBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              String _elem47; // required
              _elem47 = iprot.readString();
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecTagsByUserTags_args implements org.apache.thrift.TBase<RecTagsByUserTags_args, RecTagsByUserTags_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecTagsByUserTags_args");

    private static final org.apache.thrift.protocol.TField LIST_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("listTags", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecTagsByUserTags_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecTagsByUserTags_argsTupleSchemeFactory());
    }

    public List<String> listTags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_TAGS((short)1, "listTags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_TAGS
            return LIST_TAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_TAGS, new org.apache.thrift.meta_data.FieldMetaData("listTags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecTagsByUserTags_args.class, metaDataMap);
    }

    public RecTagsByUserTags_args() {
    }

    public RecTagsByUserTags_args(
      List<String> listTags)
    {
      this();
      this.listTags = listTags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecTagsByUserTags_args(RecTagsByUserTags_args other) {
      if (other.isSetListTags()) {
        List<String> __this__listTags = new ArrayList<String>();
        for (String other_element : other.listTags) {
          __this__listTags.add(other_element);
        }
        this.listTags = __this__listTags;
      }
    }

    public RecTagsByUserTags_args deepCopy() {
      return new RecTagsByUserTags_args(this);
    }

    @Override
    public void clear() {
      this.listTags = null;
    }

    public int getListTagsSize() {
      return (this.listTags == null) ? 0 : this.listTags.size();
    }

    public java.util.Iterator<String> getListTagsIterator() {
      return (this.listTags == null) ? null : this.listTags.iterator();
    }

    public void addToListTags(String elem) {
      if (this.listTags == null) {
        this.listTags = new ArrayList<String>();
      }
      this.listTags.add(elem);
    }

    public List<String> getListTags() {
      return this.listTags;
    }

    public RecTagsByUserTags_args setListTags(List<String> listTags) {
      this.listTags = listTags;
      return this;
    }

    public void unsetListTags() {
      this.listTags = null;
    }

    /** Returns true if field listTags is set (has been assigned a value) and false otherwise */
    public boolean isSetListTags() {
      return this.listTags != null;
    }

    public void setListTagsIsSet(boolean value) {
      if (!value) {
        this.listTags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_TAGS:
        if (value == null) {
          unsetListTags();
        } else {
          setListTags((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_TAGS:
        return getListTags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_TAGS:
        return isSetListTags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecTagsByUserTags_args)
        return this.equals((RecTagsByUserTags_args)that);
      return false;
    }

    public boolean equals(RecTagsByUserTags_args that) {
      if (that == null)
        return false;

      boolean this_present_listTags = true && this.isSetListTags();
      boolean that_present_listTags = true && that.isSetListTags();
      if (this_present_listTags || that_present_listTags) {
        if (!(this_present_listTags && that_present_listTags))
          return false;
        if (!this.listTags.equals(that.listTags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecTagsByUserTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecTagsByUserTags_args typedOther = (RecTagsByUserTags_args)other;

      lastComparison = Boolean.valueOf(isSetListTags()).compareTo(typedOther.isSetListTags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListTags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listTags, typedOther.listTags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecTagsByUserTags_args(");
      boolean first = true;

      sb.append("listTags:");
      if (this.listTags == null) {
        sb.append("null");
      } else {
        sb.append(this.listTags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecTagsByUserTags_argsStandardSchemeFactory implements SchemeFactory {
      public RecTagsByUserTags_argsStandardScheme getScheme() {
        return new RecTagsByUserTags_argsStandardScheme();
      }
    }

    private static class RecTagsByUserTags_argsStandardScheme extends StandardScheme<RecTagsByUserTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecTagsByUserTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_TAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.listTags = new ArrayList<String>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    String _elem50; // required
                    _elem50 = iprot.readString();
                    struct.listTags.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setListTagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecTagsByUserTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listTags != null) {
          oprot.writeFieldBegin(LIST_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listTags.size()));
            for (String _iter51 : struct.listTags)
            {
              oprot.writeString(_iter51);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecTagsByUserTags_argsTupleSchemeFactory implements SchemeFactory {
      public RecTagsByUserTags_argsTupleScheme getScheme() {
        return new RecTagsByUserTags_argsTupleScheme();
      }
    }

    private static class RecTagsByUserTags_argsTupleScheme extends TupleScheme<RecTagsByUserTags_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecTagsByUserTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListTags()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetListTags()) {
          {
            oprot.writeI32(struct.listTags.size());
            for (String _iter52 : struct.listTags)
            {
              oprot.writeString(_iter52);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecTagsByUserTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.listTags = new ArrayList<String>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              String _elem55; // required
              _elem55 = iprot.readString();
              struct.listTags.add(_elem55);
            }
          }
          struct.setListTagsIsSet(true);
        }
      }
    }

  }

  public static class RecTagsByUserTags_result implements org.apache.thrift.TBase<RecTagsByUserTags_result, RecTagsByUserTags_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecTagsByUserTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecTagsByUserTags_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecTagsByUserTags_resultTupleSchemeFactory());
    }

    public List<String> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecTagsByUserTags_result.class, metaDataMap);
    }

    public RecTagsByUserTags_result() {
    }

    public RecTagsByUserTags_result(
      List<String> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecTagsByUserTags_result(RecTagsByUserTags_result other) {
      if (other.isSetSuccess()) {
        List<String> __this__success = new ArrayList<String>();
        for (String other_element : other.success) {
          __this__success.add(other_element);
        }
        this.success = __this__success;
      }
    }

    public RecTagsByUserTags_result deepCopy() {
      return new RecTagsByUserTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(String elem) {
      if (this.success == null) {
        this.success = new ArrayList<String>();
      }
      this.success.add(elem);
    }

    public List<String> getSuccess() {
      return this.success;
    }

    public RecTagsByUserTags_result setSuccess(List<String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecTagsByUserTags_result)
        return this.equals((RecTagsByUserTags_result)that);
      return false;
    }

    public boolean equals(RecTagsByUserTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecTagsByUserTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecTagsByUserTags_result typedOther = (RecTagsByUserTags_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecTagsByUserTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecTagsByUserTags_resultStandardSchemeFactory implements SchemeFactory {
      public RecTagsByUserTags_resultStandardScheme getScheme() {
        return new RecTagsByUserTags_resultStandardScheme();
      }
    }

    private static class RecTagsByUserTags_resultStandardScheme extends StandardScheme<RecTagsByUserTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecTagsByUserTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.success = new ArrayList<String>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    String _elem58; // required
                    _elem58 = iprot.readString();
                    struct.success.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecTagsByUserTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (String _iter59 : struct.success)
            {
              oprot.writeString(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecTagsByUserTags_resultTupleSchemeFactory implements SchemeFactory {
      public RecTagsByUserTags_resultTupleScheme getScheme() {
        return new RecTagsByUserTags_resultTupleScheme();
      }
    }

    private static class RecTagsByUserTags_resultTupleScheme extends TupleScheme<RecTagsByUserTags_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecTagsByUserTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (String _iter60 : struct.success)
            {
              oprot.writeString(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecTagsByUserTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new ArrayList<String>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              String _elem63; // required
              _elem63 = iprot.readString();
              struct.success.add(_elem63);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecUserByUserName_args implements org.apache.thrift.TBase<RecUserByUserName_args, RecUserByUserName_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecUserByUserName_args");

    private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecUserByUserName_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecUserByUserName_argsTupleSchemeFactory());
    }

    public String userName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_NAME((short)1, "userName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_NAME
            return USER_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecUserByUserName_args.class, metaDataMap);
    }

    public RecUserByUserName_args() {
    }

    public RecUserByUserName_args(
      String userName)
    {
      this();
      this.userName = userName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecUserByUserName_args(RecUserByUserName_args other) {
      if (other.isSetUserName()) {
        this.userName = other.userName;
      }
    }

    public RecUserByUserName_args deepCopy() {
      return new RecUserByUserName_args(this);
    }

    @Override
    public void clear() {
      this.userName = null;
    }

    public String getUserName() {
      return this.userName;
    }

    public RecUserByUserName_args setUserName(String userName) {
      this.userName = userName;
      return this;
    }

    public void unsetUserName() {
      this.userName = null;
    }

    /** Returns true if field userName is set (has been assigned a value) and false otherwise */
    public boolean isSetUserName() {
      return this.userName != null;
    }

    public void setUserNameIsSet(boolean value) {
      if (!value) {
        this.userName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_NAME:
        if (value == null) {
          unsetUserName();
        } else {
          setUserName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_NAME:
        return getUserName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_NAME:
        return isSetUserName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecUserByUserName_args)
        return this.equals((RecUserByUserName_args)that);
      return false;
    }

    public boolean equals(RecUserByUserName_args that) {
      if (that == null)
        return false;

      boolean this_present_userName = true && this.isSetUserName();
      boolean that_present_userName = true && that.isSetUserName();
      if (this_present_userName || that_present_userName) {
        if (!(this_present_userName && that_present_userName))
          return false;
        if (!this.userName.equals(that.userName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecUserByUserName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecUserByUserName_args typedOther = (RecUserByUserName_args)other;

      lastComparison = Boolean.valueOf(isSetUserName()).compareTo(typedOther.isSetUserName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, typedOther.userName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecUserByUserName_args(");
      boolean first = true;

      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecUserByUserName_argsStandardSchemeFactory implements SchemeFactory {
      public RecUserByUserName_argsStandardScheme getScheme() {
        return new RecUserByUserName_argsStandardScheme();
      }
    }

    private static class RecUserByUserName_argsStandardScheme extends StandardScheme<RecUserByUserName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecUserByUserName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userName = iprot.readString();
                struct.setUserNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecUserByUserName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userName != null) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecUserByUserName_argsTupleSchemeFactory implements SchemeFactory {
      public RecUserByUserName_argsTupleScheme getScheme() {
        return new RecUserByUserName_argsTupleScheme();
      }
    }

    private static class RecUserByUserName_argsTupleScheme extends TupleScheme<RecUserByUserName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecUserByUserName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetUserName()) {
          oprot.writeString(struct.userName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecUserByUserName_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userName = iprot.readString();
          struct.setUserNameIsSet(true);
        }
      }
    }

  }

  public static class RecUserByUserName_result implements org.apache.thrift.TBase<RecUserByUserName_result, RecUserByUserName_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecUserByUserName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecUserByUserName_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecUserByUserName_resultTupleSchemeFactory());
    }

    public List<User> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecUserByUserName_result.class, metaDataMap);
    }

    public RecUserByUserName_result() {
    }

    public RecUserByUserName_result(
      List<User> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecUserByUserName_result(RecUserByUserName_result other) {
      if (other.isSetSuccess()) {
        List<User> __this__success = new ArrayList<User>();
        for (User other_element : other.success) {
          __this__success.add(new User(other_element));
        }
        this.success = __this__success;
      }
    }

    public RecUserByUserName_result deepCopy() {
      return new RecUserByUserName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<User> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(User elem) {
      if (this.success == null) {
        this.success = new ArrayList<User>();
      }
      this.success.add(elem);
    }

    public List<User> getSuccess() {
      return this.success;
    }

    public RecUserByUserName_result setSuccess(List<User> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<User>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecUserByUserName_result)
        return this.equals((RecUserByUserName_result)that);
      return false;
    }

    public boolean equals(RecUserByUserName_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecUserByUserName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecUserByUserName_result typedOther = (RecUserByUserName_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecUserByUserName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecUserByUserName_resultStandardSchemeFactory implements SchemeFactory {
      public RecUserByUserName_resultStandardScheme getScheme() {
        return new RecUserByUserName_resultStandardScheme();
      }
    }

    private static class RecUserByUserName_resultStandardScheme extends StandardScheme<RecUserByUserName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecUserByUserName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<User>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    User _elem66; // required
                    _elem66 = new User();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecUserByUserName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (User _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecUserByUserName_resultTupleSchemeFactory implements SchemeFactory {
      public RecUserByUserName_resultTupleScheme getScheme() {
        return new RecUserByUserName_resultTupleScheme();
      }
    }

    private static class RecUserByUserName_resultTupleScheme extends TupleScheme<RecUserByUserName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecUserByUserName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (User _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecUserByUserName_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<User>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              User _elem71; // required
              _elem71 = new User();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecUserByBook_args implements org.apache.thrift.TBase<RecUserByBook_args, RecUserByBook_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecUserByBook_args");

    private static final org.apache.thrift.protocol.TField BOOKID_FIELD_DESC = new org.apache.thrift.protocol.TField("bookid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecUserByBook_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecUserByBook_argsTupleSchemeFactory());
    }

    public String bookid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOOKID((short)1, "bookid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOOKID
            return BOOKID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOOKID, new org.apache.thrift.meta_data.FieldMetaData("bookid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecUserByBook_args.class, metaDataMap);
    }

    public RecUserByBook_args() {
    }

    public RecUserByBook_args(
      String bookid)
    {
      this();
      this.bookid = bookid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecUserByBook_args(RecUserByBook_args other) {
      if (other.isSetBookid()) {
        this.bookid = other.bookid;
      }
    }

    public RecUserByBook_args deepCopy() {
      return new RecUserByBook_args(this);
    }

    @Override
    public void clear() {
      this.bookid = null;
    }

    public String getBookid() {
      return this.bookid;
    }

    public RecUserByBook_args setBookid(String bookid) {
      this.bookid = bookid;
      return this;
    }

    public void unsetBookid() {
      this.bookid = null;
    }

    /** Returns true if field bookid is set (has been assigned a value) and false otherwise */
    public boolean isSetBookid() {
      return this.bookid != null;
    }

    public void setBookidIsSet(boolean value) {
      if (!value) {
        this.bookid = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOOKID:
        if (value == null) {
          unsetBookid();
        } else {
          setBookid((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOOKID:
        return getBookid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOOKID:
        return isSetBookid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecUserByBook_args)
        return this.equals((RecUserByBook_args)that);
      return false;
    }

    public boolean equals(RecUserByBook_args that) {
      if (that == null)
        return false;

      boolean this_present_bookid = true && this.isSetBookid();
      boolean that_present_bookid = true && that.isSetBookid();
      if (this_present_bookid || that_present_bookid) {
        if (!(this_present_bookid && that_present_bookid))
          return false;
        if (!this.bookid.equals(that.bookid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecUserByBook_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecUserByBook_args typedOther = (RecUserByBook_args)other;

      lastComparison = Boolean.valueOf(isSetBookid()).compareTo(typedOther.isSetBookid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBookid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bookid, typedOther.bookid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecUserByBook_args(");
      boolean first = true;

      sb.append("bookid:");
      if (this.bookid == null) {
        sb.append("null");
      } else {
        sb.append(this.bookid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecUserByBook_argsStandardSchemeFactory implements SchemeFactory {
      public RecUserByBook_argsStandardScheme getScheme() {
        return new RecUserByBook_argsStandardScheme();
      }
    }

    private static class RecUserByBook_argsStandardScheme extends StandardScheme<RecUserByBook_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecUserByBook_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOOKID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.bookid = iprot.readString();
                struct.setBookidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecUserByBook_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bookid != null) {
          oprot.writeFieldBegin(BOOKID_FIELD_DESC);
          oprot.writeString(struct.bookid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecUserByBook_argsTupleSchemeFactory implements SchemeFactory {
      public RecUserByBook_argsTupleScheme getScheme() {
        return new RecUserByBook_argsTupleScheme();
      }
    }

    private static class RecUserByBook_argsTupleScheme extends TupleScheme<RecUserByBook_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecUserByBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBookid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetBookid()) {
          oprot.writeString(struct.bookid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecUserByBook_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bookid = iprot.readString();
          struct.setBookidIsSet(true);
        }
      }
    }

  }

  public static class RecUserByBook_result implements org.apache.thrift.TBase<RecUserByBook_result, RecUserByBook_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecUserByBook_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecUserByBook_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecUserByBook_resultTupleSchemeFactory());
    }

    public List<User> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecUserByBook_result.class, metaDataMap);
    }

    public RecUserByBook_result() {
    }

    public RecUserByBook_result(
      List<User> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecUserByBook_result(RecUserByBook_result other) {
      if (other.isSetSuccess()) {
        List<User> __this__success = new ArrayList<User>();
        for (User other_element : other.success) {
          __this__success.add(new User(other_element));
        }
        this.success = __this__success;
      }
    }

    public RecUserByBook_result deepCopy() {
      return new RecUserByBook_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<User> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(User elem) {
      if (this.success == null) {
        this.success = new ArrayList<User>();
      }
      this.success.add(elem);
    }

    public List<User> getSuccess() {
      return this.success;
    }

    public RecUserByBook_result setSuccess(List<User> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<User>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecUserByBook_result)
        return this.equals((RecUserByBook_result)that);
      return false;
    }

    public boolean equals(RecUserByBook_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecUserByBook_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecUserByBook_result typedOther = (RecUserByBook_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecUserByBook_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecUserByBook_resultStandardSchemeFactory implements SchemeFactory {
      public RecUserByBook_resultStandardScheme getScheme() {
        return new RecUserByBook_resultStandardScheme();
      }
    }

    private static class RecUserByBook_resultStandardScheme extends StandardScheme<RecUserByBook_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecUserByBook_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<User>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    User _elem74; // required
                    _elem74 = new User();
                    _elem74.read(iprot);
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecUserByBook_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (User _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecUserByBook_resultTupleSchemeFactory implements SchemeFactory {
      public RecUserByBook_resultTupleScheme getScheme() {
        return new RecUserByBook_resultTupleScheme();
      }
    }

    private static class RecUserByBook_resultTupleScheme extends TupleScheme<RecUserByBook_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecUserByBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (User _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecUserByBook_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<User>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              User _elem79; // required
              _elem79 = new User();
              _elem79.read(iprot);
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class RecUserByUserTags_args implements org.apache.thrift.TBase<RecUserByUserTags_args, RecUserByUserTags_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecUserByUserTags_args");

    private static final org.apache.thrift.protocol.TField LIST_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("listTags", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecUserByUserTags_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecUserByUserTags_argsTupleSchemeFactory());
    }

    public List<String> listTags; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_TAGS((short)1, "listTags");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_TAGS
            return LIST_TAGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_TAGS, new org.apache.thrift.meta_data.FieldMetaData("listTags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecUserByUserTags_args.class, metaDataMap);
    }

    public RecUserByUserTags_args() {
    }

    public RecUserByUserTags_args(
      List<String> listTags)
    {
      this();
      this.listTags = listTags;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecUserByUserTags_args(RecUserByUserTags_args other) {
      if (other.isSetListTags()) {
        List<String> __this__listTags = new ArrayList<String>();
        for (String other_element : other.listTags) {
          __this__listTags.add(other_element);
        }
        this.listTags = __this__listTags;
      }
    }

    public RecUserByUserTags_args deepCopy() {
      return new RecUserByUserTags_args(this);
    }

    @Override
    public void clear() {
      this.listTags = null;
    }

    public int getListTagsSize() {
      return (this.listTags == null) ? 0 : this.listTags.size();
    }

    public java.util.Iterator<String> getListTagsIterator() {
      return (this.listTags == null) ? null : this.listTags.iterator();
    }

    public void addToListTags(String elem) {
      if (this.listTags == null) {
        this.listTags = new ArrayList<String>();
      }
      this.listTags.add(elem);
    }

    public List<String> getListTags() {
      return this.listTags;
    }

    public RecUserByUserTags_args setListTags(List<String> listTags) {
      this.listTags = listTags;
      return this;
    }

    public void unsetListTags() {
      this.listTags = null;
    }

    /** Returns true if field listTags is set (has been assigned a value) and false otherwise */
    public boolean isSetListTags() {
      return this.listTags != null;
    }

    public void setListTagsIsSet(boolean value) {
      if (!value) {
        this.listTags = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_TAGS:
        if (value == null) {
          unsetListTags();
        } else {
          setListTags((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_TAGS:
        return getListTags();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_TAGS:
        return isSetListTags();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecUserByUserTags_args)
        return this.equals((RecUserByUserTags_args)that);
      return false;
    }

    public boolean equals(RecUserByUserTags_args that) {
      if (that == null)
        return false;

      boolean this_present_listTags = true && this.isSetListTags();
      boolean that_present_listTags = true && that.isSetListTags();
      if (this_present_listTags || that_present_listTags) {
        if (!(this_present_listTags && that_present_listTags))
          return false;
        if (!this.listTags.equals(that.listTags))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecUserByUserTags_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecUserByUserTags_args typedOther = (RecUserByUserTags_args)other;

      lastComparison = Boolean.valueOf(isSetListTags()).compareTo(typedOther.isSetListTags());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListTags()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listTags, typedOther.listTags);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecUserByUserTags_args(");
      boolean first = true;

      sb.append("listTags:");
      if (this.listTags == null) {
        sb.append("null");
      } else {
        sb.append(this.listTags);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecUserByUserTags_argsStandardSchemeFactory implements SchemeFactory {
      public RecUserByUserTags_argsStandardScheme getScheme() {
        return new RecUserByUserTags_argsStandardScheme();
      }
    }

    private static class RecUserByUserTags_argsStandardScheme extends StandardScheme<RecUserByUserTags_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecUserByUserTags_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_TAGS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.listTags = new ArrayList<String>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    String _elem82; // required
                    _elem82 = iprot.readString();
                    struct.listTags.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setListTagsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecUserByUserTags_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listTags != null) {
          oprot.writeFieldBegin(LIST_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listTags.size()));
            for (String _iter83 : struct.listTags)
            {
              oprot.writeString(_iter83);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecUserByUserTags_argsTupleSchemeFactory implements SchemeFactory {
      public RecUserByUserTags_argsTupleScheme getScheme() {
        return new RecUserByUserTags_argsTupleScheme();
      }
    }

    private static class RecUserByUserTags_argsTupleScheme extends TupleScheme<RecUserByUserTags_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecUserByUserTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListTags()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetListTags()) {
          {
            oprot.writeI32(struct.listTags.size());
            for (String _iter84 : struct.listTags)
            {
              oprot.writeString(_iter84);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecUserByUserTags_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.listTags = new ArrayList<String>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              String _elem87; // required
              _elem87 = iprot.readString();
              struct.listTags.add(_elem87);
            }
          }
          struct.setListTagsIsSet(true);
        }
      }
    }

  }

  public static class RecUserByUserTags_result implements org.apache.thrift.TBase<RecUserByUserTags_result, RecUserByUserTags_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RecUserByUserTags_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new RecUserByUserTags_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new RecUserByUserTags_resultTupleSchemeFactory());
    }

    public List<User> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RecUserByUserTags_result.class, metaDataMap);
    }

    public RecUserByUserTags_result() {
    }

    public RecUserByUserTags_result(
      List<User> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public RecUserByUserTags_result(RecUserByUserTags_result other) {
      if (other.isSetSuccess()) {
        List<User> __this__success = new ArrayList<User>();
        for (User other_element : other.success) {
          __this__success.add(new User(other_element));
        }
        this.success = __this__success;
      }
    }

    public RecUserByUserTags_result deepCopy() {
      return new RecUserByUserTags_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<User> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(User elem) {
      if (this.success == null) {
        this.success = new ArrayList<User>();
      }
      this.success.add(elem);
    }

    public List<User> getSuccess() {
      return this.success;
    }

    public RecUserByUserTags_result setSuccess(List<User> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<User>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof RecUserByUserTags_result)
        return this.equals((RecUserByUserTags_result)that);
      return false;
    }

    public boolean equals(RecUserByUserTags_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(RecUserByUserTags_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      RecUserByUserTags_result typedOther = (RecUserByUserTags_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("RecUserByUserTags_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class RecUserByUserTags_resultStandardSchemeFactory implements SchemeFactory {
      public RecUserByUserTags_resultStandardScheme getScheme() {
        return new RecUserByUserTags_resultStandardScheme();
      }
    }

    private static class RecUserByUserTags_resultStandardScheme extends StandardScheme<RecUserByUserTags_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, RecUserByUserTags_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<User>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    User _elem90; // required
                    _elem90 = new User();
                    _elem90.read(iprot);
                    struct.success.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, RecUserByUserTags_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (User _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class RecUserByUserTags_resultTupleSchemeFactory implements SchemeFactory {
      public RecUserByUserTags_resultTupleScheme getScheme() {
        return new RecUserByUserTags_resultTupleScheme();
      }
    }

    private static class RecUserByUserTags_resultTupleScheme extends TupleScheme<RecUserByUserTags_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, RecUserByUserTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (User _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, RecUserByUserTags_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<User>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              User _elem95; // required
              _elem95 = new User();
              _elem95.read(iprot);
              struct.success.add(_elem95);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
