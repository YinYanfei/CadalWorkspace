package cn.cadal.rec.algo.utilize.optimize;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

import cn.cadal.rec.common.Book;
import cn.cadal.rec.common.QueryInfoFromPg;

public class RemoveDuplicate {
	
	private double SIMILAR = 0.8;
	private int shinglingK = 3;
	
	public QueryInfoFromPg qifp = null;
	
	private List<String> shinglingDicList = null;
	public List<BitSet> bookidBitsetList = null;
	
	/**
	 * Construct functions
	 */
	public RemoveDuplicate(){
		this.qifp = new QueryInfoFromPg();
		this.shinglingDicList = new ArrayList<String>(); 
		this.bookidBitsetList = new ArrayList<BitSet>();
	}
	public RemoveDuplicate(double similar, int shinglingK){
		this.SIMILAR = similar;
		this.shinglingK = shinglingK;
		
		this.qifp = new QueryInfoFromPg();
		this.shinglingDicList = new ArrayList<String>(); 
		this.bookidBitsetList = new ArrayList<BitSet>();
	}
	
	/**
	 * To remove duplicate for bookidList
	 * 
	 * @param bookidList
	 * @return
	 */
	public List<Book> RemoveDupFunc(List<String> bookidList){
		List<Book> queryBookinfo = new ArrayList<Book>();
		queryBookinfo = this.qifp.QueryMetaData(bookidList);

		// Calculate shingling bit-set for total books
		for(int i = 0; i < queryBookinfo.size(); ++i) {
			BitSet bitset = this.CalBitset(queryBookinfo.get(i).getBookName());
			this.bookidBitsetList.add(bitset);
		}
		
		// Calculate similar and remove duplicate
		int count = 0;
		for(int j = 0; j < this.bookidBitsetList.size(); ++j) {
			for(int t = j + 1; t < this.bookidBitsetList.size(); ++t) {
				if(this.bookidBitsetList.get(j) != null && this.bookidBitsetList.get(t) != null) {
					count++;
					this.CalAndRemoveDup(j, t);
				}
			}
		}
		System.out.println(count);
		
		// Get result item
		List<Book> resBookinfo = new ArrayList<Book>();
		for(int i = 0; i < this.bookidBitsetList.size(); ++i) {
			if(this.bookidBitsetList.get(i) != null){
				resBookinfo.add(queryBookinfo.get(i));
			}
		}
		
		return resBookinfo;
	}
	
	/**
	 * Calculate shingling bit-set for each book-title
	 * 
	 * @param title
	 * @return
	 */
	private BitSet CalBitset(String title){
		BitSet bitset = new BitSet();
		
		String strTitle = this.StringFilter(title);
		
		int len = strTitle.length();
		String shinglingStr = null;
		for(int idx = 0; idx < len; ++idx) {
			shinglingStr = strTitle.substring(idx, idx + 3 > len ? len : idx + 3);
			
			if(!this.shinglingDicList.contains(shinglingStr)) {
				this.shinglingDicList.add(shinglingStr);
			}
			bitset.set(this.shinglingDicList.indexOf(shinglingStr), true);
			
			if(idx + 3 > len) {
				break;
			}
		}
		
		return bitset;
	}

	/**
	 * Remove special characters of string title
	 * 
	 * @param str
	 * @return
	 * @throws PatternSyntaxException
	 */
	public String StringFilter(String str) throws PatternSyntaxException {
		String regEx = "[`~!@#$%^&*()+=|{}':;',\\[\\].<>/?~£¡@#£¤%¡­¡­&*£¨£©¡ª¡ª+|{}¡¾¡¿¡®£»£º¡±¡°¡¯¡££¬¡¢£¿_ --]";
		Pattern p = Pattern.compile(regEx);
		Matcher m = p.matcher(str);
		
		return m.replaceAll("").trim();
	}
	
	/**
	 * Calculate similar and set null for some item
	 * 
	 * @param j
	 * @param t
	 */
	private void CalAndRemoveDup(int j, int t){
		BitSet bs1 = this.bookidBitsetList.get(j);
		BitSet bs2 = this.bookidBitsetList.get(t);
		
		BitSet bsAnd = (BitSet) bs1.clone();
		BitSet bsOr  = (BitSet) bs1.clone();
		
		bsAnd.and(bs2);
		bsOr.or(bs2);
		
		double sim = (bsAnd.cardinality() * 1.0) / (bsOr.cardinality() * 1.0);
		System.out.println(j + " " + t + " " + sim);
		if(sim > this.SIMILAR) {
			this.bookidBitsetList.set(t, null);
		}
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// Analyze and Test
		RemoveDuplicate rm = new RemoveDuplicate();
		List<String> bookidList = new ArrayList<String>();
		
//		bookidList.add("01001589");
//		bookidList.add("01001590");
//		bookidList.add("01001591");
//		bookidList.add("01001592");
//		bookidList.add("01001593");
//		bookidList.add("01001594");
//		bookidList.add("01001595");
//		bookidList.add("01001596");
//		bookidList.add("01001626");
//		bookidList.add("01001651");
//		bookidList.add("01001652");
		bookidList.add("01000373");
		bookidList.add("01000374");
		bookidList.add("01000375");
		bookidList.add("01000376");
		
		List<Book> resBookinfo = rm.RemoveDupFunc(bookidList);

		// print information
		System.out.println(resBookinfo.size());
		for(int i = 0; i < resBookinfo.size(); ++i) {
			System.out.println("-----------------");
			System.out.println(resBookinfo.get(i).getBookNo());
			System.out.println(resBookinfo.get(i).getBookName());
			System.out.println(resBookinfo.get(i).getAuthor());
			System.out.println(resBookinfo.get(i).getPress());
		}		
	}
	
	/**
	 * Getter and Setter
	 */
	public double getSIMILAR() {
		return SIMILAR;
	}
	public int getShinglingK() {
		return shinglingK;
	}
	public List<String> getShinglingDicList() {
		return shinglingDicList;
	}
	public List<BitSet> getBookidBitsetList() {
		return bookidBitsetList;
	}
	public void setSIMILAR(double sIMILAR) {
		SIMILAR = sIMILAR;
	}
	public void setShinglingK(int shinglingK) {
		this.shinglingK = shinglingK;
	}
	public void setShinglingDicList(List<String> shinglingDicList) {
		this.shinglingDicList = shinglingDicList;
	}
	public void setBookidBitsetList(List<BitSet> bookidBitsetList) {
		this.bookidBitsetList = bookidBitsetList;
	}
}
