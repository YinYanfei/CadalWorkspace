package cn.cadal.rec.algo.sgd;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.RandomAccessFile;
import java.util.Properties;
import java.util.Random;

public class SGD {
	private String DIR = "E:/Recommendation/LFM/";
	private String PROPERTY = "properties.txt";
	private String TRAIN = "train.txt";
	private String TEST = "test.txt";
	private String LOG = "log.txt";
	
	private String RES_USER = "user.txt";
	private String RES_ITEM = "item.txt";
	
	/**
	 * Constructor functions
	 */
	public SGD(){
		// Nothing to do
	}
	public SGD(String property, String train, String test, String log, String user, String item){
		this.PROPERTY = property;
		this.TRAIN = train;
		this.TEST = test;
		this.LOG = log;
		this.RES_ITEM = item;
		this.RES_USER = user;
	}
	
	/**
	 * To train the model for this data-set
	 */
	public void Train(){
		RandomAccessFile input = null;
		BufferedWriter output = null;
		
		try{
			input = new RandomAccessFile(this.DIR + this.TRAIN,"r");
			
			Properties props = new Properties();
			File propFile = new File(this.DIR + this.PROPERTY);
			if (propFile.exists()) {
				FileReader in = new FileReader(propFile);
				props.load(in);
				in.close();
			}
			
			// To get properties
			int iters = Integer.parseInt(props.getProperty("iters", "15"));
			int numLatent = Integer.parseInt(props.getProperty("numLatent", "10"));
			Float stepSize = Float.parseFloat(props.getProperty("stepSize", "0.1"));
			Float stepRate = Float.parseFloat(props.getProperty("stepRate", "0.8"));
			Float penalty = Float.parseFloat(props.getProperty("penalty", "0.1"));
			int numUser = Integer.parseInt(props.getProperty("numUser", "7000")) + 1;
			int numItem = Integer.parseInt(props.getProperty("numItem", "4000")) + 1;
			
			// Random assign matrixUser and matrixItem
			Random random = new Random();
			Float[][] matrixUser = new Float[numUser][numLatent];
			for(int i = 0; i < numUser; i++)
				for(int j = 0; j < numLatent; j++)
					matrixUser[i][j] = random.nextFloat();
			Float[][] matrixItem = new Float[numItem][numLatent];
			for(int i = 0; i < numItem; i++)
				for(int j = 0; j < numLatent; j++)
					matrixItem[i][j] = random.nextFloat();
			
			// Just train it!
			for(int i = 0; i < iters; i++){
				if (input == null)
					throw new Exception("Read file failed!");
				input.seek(0);
				String line = input.readLine();
				String token[];
				int userId, itemId;
				Float rating,prerat,difference;
				
				while(line != null){
					token = line.split(" ");
					
					userId = Integer.parseInt(token[0]);
					itemId = Integer.parseInt(token[1]);
					rating = Float.parseFloat(token[2]);
					
					prerat = 0.0F;
					for(int k = 0; k < numLatent; k++)
						prerat += matrixUser[userId][k] * matrixItem[itemId][k];
					difference = rating - prerat;
					
					//Float tmp[] = matrixUser[userId].clone();
					Float tmp;
					for(int k = 0; k < numLatent; k++){
						tmp = matrixUser[userId][k];
						matrixUser[userId][k] += stepSize * (matrixItem[itemId][k] * difference - penalty * tmp);
						matrixItem[itemId][k] += stepSize * (tmp * difference - penalty * matrixItem[itemId][k]);
					}
					line = input.readLine();
				}
				stepSize *= stepRate;
			}
			input.close();
			
			File fileUser = new File(this.DIR + this.RES_USER);
			File fileItem = new File(this.DIR + this.RES_ITEM);
			if(!fileUser.exists())
				fileUser.createNewFile();
			if(!fileItem.exists())
				fileItem.createNewFile();
			
			output = new BufferedWriter(new FileWriter(fileUser));
			String line;
			for(int i = 1; i < numUser; i++){
				line = i + " ";
				for(int j = 0; j < numLatent; j++)
					line += matrixUser[i][j] + " ";
				line += "\n";
				output.write(line);
			}
			output.flush();
			output = new BufferedWriter(new FileWriter(fileItem));
			for(int i = 1; i < numItem; i++){
				line = i + " ";
				for(int j = 0; j < numLatent; j++)
					line += matrixItem[i][j] + " ";
				line += "\n";
				output.write(line);
			}
			output.close();
			
			System.out.println("Compeleted!");
		}catch(Exception e) {
			e.printStackTrace();
		}finally{
			try{
				if(input != null)
					input.close();
				if(output != null) 
					output.close();
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Test and evaluate the model
	 */
	public void Test(){
		long startTime = System.currentTimeMillis();
		
		RandomAccessFile input = null;
		try{
			input = new RandomAccessFile(this.DIR + this.TEST,"r");
			
			Properties props = new Properties();
			File propFile = new File(this.DIR + this.PROPERTY);
			if (propFile.exists()) {
				FileReader in = new FileReader(propFile);
				props.load(in);
				in.close();
			}
			
			int iters = Integer.parseInt(props.getProperty("iters", "15"));
			int numLatent = Integer.parseInt(props.getProperty("numLatent", "10"));
			Float stepRate = Float.parseFloat(props.getProperty("stepRate", "0.8"));
			int numUser = Integer.parseInt(props.getProperty("numUser", "7000")) + 1;
			int numItem = Integer.parseInt(props.getProperty("numItem", "4000")) + 1;
			
			// Initially and reader matrixUser and matrixItem
			Double[][] matrixUser = new Double[numUser][numLatent];
			Double[][] matrixItem = new Double[numItem][numLatent];
			
			File file = new File(this.DIR + this.RES_USER);
			BufferedReader reader = new BufferedReader(new FileReader(file));
			String lineTmp = null;
			while((lineTmp = reader.readLine()) != null) {
				String [] lineTmpSplit = lineTmp.split(" ");
				for(int i = 0; i < numLatent + 1; ++i) {
					System.out.print(lineTmpSplit[i] + " ");
				}
				System.out.println("\n");
				int userid = Integer.valueOf(lineTmpSplit[0]);
				for(int i = 1; i < numLatent; ++i) {
					matrixUser[userid][i-1] = Double.valueOf(lineTmpSplit[i]);
				}
			}
			
			file = new File(this.DIR + this.RES_ITEM);
			reader = new BufferedReader(new FileReader(file));
			while((lineTmp = reader.readLine()) != null) {
				String [] lineTmpSplit = lineTmp.split(" ");
				int itemid = Integer.valueOf(lineTmpSplit[0]);
				for(int i = 1; i < numLatent; ++i) {
					matrixItem[itemid][i-1] = Double.valueOf(lineTmpSplit[i]);
				}
			}
			
			String line = input.readLine();
			String token[];
			int userId,itemId,sum = 0;
			Double rating,tmp,bias = 0.0;
			while(line != null){
				token = line.split(" ");
				userId = Integer.valueOf(token[0]);
				itemId = Integer.valueOf(token[1]);
				rating = Double.valueOf(token[2]);
				
				System.out.println(userId + " " + itemId + " " + rating);
				
				tmp = 0.0;
				for(int i = 0; i < numLatent; i++)
					tmp += matrixUser[userId][i] * matrixItem[itemId][i];
				tmp -= rating;
				bias += tmp * tmp;
				sum++;
				line = input.readLine();
			}
			input.close();
			System.out.println(Math.sqrt(bias/sum));
			long endTime = System.currentTimeMillis();
			System.out.println("times = " + (endTime - startTime)/1000+"s");
			
			BufferedWriter log = new BufferedWriter(new FileWriter(this.DIR + this.LOG, true));
			line = "iters="+iters+" numLatent="+numLatent+" stepRate="+stepRate
					+" RMSE="+Math.sqrt(bias/sum)+" times="+(endTime - startTime)/1000+"s\n";
			log.write(line);
			log.close();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try{
				if(input != null)
					input.close();
			}catch(Exception e){
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// Analyze and Test
		SGD sgd = new SGD();
		
		sgd.Test();
		
		System.out.println("Done");
	}

}
