package cn.cadal.rec.algo.usercf;

import java.io.BufferedReader; 
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class UserCF {

	private String SOURCE="E:/Recommendation/ExpData/usercf_source_sort.dat";
	private String DESTIN="E:/Recommendation/ExpData/usercf_result.dat";
	
	public Map<Integer, int []> hashUsernoBookno = null;
	public List<int []> listUsernoBookno = null;
	
	/**
	 * Construct functions
	 */
	public UserCF(){
	}
	public UserCF(String source, String destin){
		this.SOURCE = source;
		this.DESTIN = destin;
	}
	
	/**
	 * Read from this.SOURCE file and store into this.hashUsernoBookno or this.listUsernoBookno
	 */
	public void ReadIntoMap(){
		this.hashUsernoBookno = new HashMap<Integer, int []>();
		
		File file = new File(this.SOURCE);
		BufferedReader reader = null;
		
		try{
			reader = new BufferedReader(new FileReader(file));
			String line = null;
			String [] lineSplit = null;
			Integer lineNo = 1;
			int size = 0;
			
			while((line = reader.readLine()) != null) {
				lineSplit = line.split(" ");
				size = lineSplit.length;
				int [] val = new int[size];
				
				for(int i = 0; i < size; ++i) {
					val[i] = Integer.valueOf(lineSplit[i]);
				}
				this.hashUsernoBookno.put(lineNo, val);
				lineNo += 1;
			}
			
			reader.close();
		}catch(Exception e) {
			e.printStackTrace();
		}finally{
			try{
				if(reader != null) {
					reader.close();
				}
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	public void ReadIntoList(){
		this.listUsernoBookno = new ArrayList<int []>();
		
		File file = new File(this.SOURCE);
		BufferedReader reader = null;
		
		try{
			reader = new BufferedReader(new FileReader(file));
			
			String line = null;
			String [] lineSplit = null;
			int size = 0;
			
			while((line = reader.readLine()) != null){
				lineSplit = line.split(" ");
				size = lineSplit.length;
				
				int [] val = new int[size];
				
				for(int i = 0; i < size; ++i) {
					val[i] = Integer.valueOf(lineSplit[i]);
				}
				
				this.listUsernoBookno.add(val);
			}
			
			reader.close();
		}catch(Exception e) {
			e.printStackTrace();
		}finally{
			try{
				if(reader != null) {
					reader.close();
				}
			}catch(Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	/**
	 * Frame of the algorithm
	 * 		- For first, calculate total distance between each user
	 * 		- For second, calculate the distance of 'userno' with other user
	 * 		- For third, calculate the distance between 'userno1' and 'userno2', 
	 * 		  	this function return the result directly
	 */
	public void CalFrame(){
		
	}
	public void CalFrame(int userno){
		if(userno > this.listUsernoBookno.size()) {
			System.out.println("None find this user");
		}
		
		
		try{
			int[] usernoInfo = null;
			for (int i = 0; i < this.listUsernoBookno.size(); ++i) {
				if (i + 1 == userno) {
					usernoInfo = this.listUsernoBookno.get(i);
				}
			}

			for (int i = 0; i < this.listUsernoBookno.size(); ++i) {
				
			}
		}catch(Exception e) {
			e.printStackTrace();
		}finally{
			
		}
		
	}
	public double CalFrame(int userno1, int userno2){
		int [] userInfo1 = this.hashUsernoBookno.get(userno1);
		int [] userInfo2 = this.hashUsernoBookno.get(userno2);

		return this.CosineDistance(userInfo1, userInfo2);
	}

	/**
	 * The measure to calculate distance
	 */
	public double CosineDistance(int [] userOne, int [] userTwo){
		if(userOne == null || userOne.length < 0 || userTwo == null || userTwo.length < 0){
			return 0.0;
		}
		
		Map<Integer, int[]> algorithmMap = new HashMap<Integer, int[]>();
		for(int i = 0; i < userOne.length; ++i) {
			int [] fq = algorithmMap.get(userOne[i]);
			if(fq != null && fq.length == 2){
				fq[0]++;
			}else {
				fq = new int[2];
				fq[0] = 1;
				fq[1] = 0;
				algorithmMap.put(userOne[i], fq);
			}
		}
		for(int i = 0; i < userTwo.length; ++i) {
			int [] fq = algorithmMap.get(userTwo[i]);
			if(fq != null && fq.length == 2) {
				fq[1]++;
			}else{
				fq = new int[2];
				fq[0] = 0;
				fq[1] = 1;
				algorithmMap.put(userTwo[i], fq);
			}
		}
		
		Iterator<Integer> iterator = algorithmMap.keySet().iterator();
		double sq1 = 0;
		double sq2 = 0;
		double denominator = 0; 
		while(iterator.hasNext()){
			int[] c = algorithmMap.get(iterator.next());
			denominator += c[0]*c[1];
			sq1 += c[0]*c[0];
			sq2 += c[1]*c[1];
		}

		double res = denominator / Math.sqrt(sq1*sq2);
		
		if(Double.isNaN(res))
			return 0.0;
		
		return res;
	}
	public double JaccardDistance(int [] userOne, int [] userTwo){
		if(userOne == null || userOne.length < 0 || userTwo == null || userTwo.length < 0){
			return 0.0;
		}
		
		Map<Integer, Integer> algorithmMap = new HashMap<Integer, Integer>();
		for(int i = 0; i < userOne.length; ++i) {
			algorithmMap.put(userOne[i], 0);
		}
		for(int i = 0; i < userTwo.length; ++i) {
			if(algorithmMap.containsKey(userTwo[i])) {
				algorithmMap.put(userTwo[i], 1);
			}else{
				algorithmMap.put(userTwo[i], 0);
			}
		}
		
		Iterator<Integer> iterator = algorithmMap.keySet().iterator();
		double inter = 0;
		while(iterator.hasNext()){
			if(algorithmMap.get(iterator.next()) == 1) {
				inter++;
			}
		}
		double res = inter / algorithmMap.size();

		if(Double.isNaN(res)){
			return 0.0;
		}
		
		return res;
	}
	public double EuclideanDistance(int [] userOne, int [] userTwo){
		// This measure is not encouraged
		return 0.0;
	}

	/**
	 * Print function using to scan the content of this.hashUsernoBookno and this.listUsernoBookno
	 * 		- For first to print this.hashUsernoBookno
	 * 		- For second to print this.listUsernoBookno
	 */
	public void Print(String content){
		if(content.equals("HashUsernoBookno")){
			this.PrintHashUsernoBookno(this.hashUsernoBookno);
		}else if(content.equals("ListUsernoBookno")) {
			this.PrintListUsernoBookno(this.listUsernoBookno);
		}else{
			System.out.println("Using print just like:\n \tprint(\"HashUsernoBookno\") \n\t or \n\tprint(\"ListUsernoBookno\")");
		}
	}
	@SuppressWarnings("unchecked")
	private void PrintHashUsernoBookno(Map<Integer, int []> hashUsernoBookno){
		Iterator iter = hashUsernoBookno.keySet().iterator(); 
		while (iter.hasNext()) { 
		    int key = (Integer)iter.next(); 
		    int [] val = hashUsernoBookno.get(key); 
		    
		    System.out.println("-------------");
		    System.out.println(key);
		    for(int i = 0; i < val.length; ++i) {
		    	System.out.print(val[i]);
		    	System.out.print(" ");
		    }
		    System.out.println("\n");
		} 
	}
	private void PrintListUsernoBookno(List<int []> listUsernoBookno){
		int [] val = null;
		for(int outer = 0; outer < listUsernoBookno.size(); ++outer) {
			val = listUsernoBookno.get(outer);
			System.out.println("--------------");
			for(int inner = 0; inner < val.length; ++inner) {
				System.out.print(val[inner]);
				System.out.print(" ");
			}
			System.out.println("\n");
		}
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// Calculate
		UserCF usercf = new UserCF();
		
//		usercf.ReadIntoMap();
//		usercf.Print("HashUsernoBookno");

//		usercf.ReadIntoList();
//		usercf.Print("ListUsernoBookno");
		
//		int [] userOne = {1,2,3};
//		int [] userTwo = {2,3,4};
//		System.out.println(usercf.CosineDistance(userOne, userTwo));
//		System.out.println(usercf.JaccardDistance(userOne, userTwo));
		
		
		
	}

}
