package cn.cadal.rec.algo.utilize.optimize;

import java.io.*;
import java.util.Properties;
import java.util.Random;
import java.lang.Math;

public class LFM {
	public static void main(String[] args) throws Exception {
		long startTime = System.currentTimeMillis();
		RandomAccessFile input = new RandomAccessFile("E:/Recommendation/LFM/train.txt","r");
		
		Properties props = new Properties();
		File propFile = new File("E:/Recommendation/LFM/properties.txt");
		if (propFile.exists()) {
			FileReader in = new FileReader(propFile);
			props.load(in);
			in.close();
		}
		
		int iters = Integer.parseInt(props.getProperty("iters", "15"));
		int numLatent = Integer.parseInt(props.getProperty("numLatent", "10"));
		Float stepSize = Float.parseFloat(props.getProperty("stepSize", "0.1"));
		Float stepRate = Float.parseFloat(props.getProperty("stepRate", "0.8"));
		Float penalty = Float.parseFloat(props.getProperty("penalty", "0.1"));
		int numUser = Integer.parseInt(props.getProperty("numUser", "7000")) + 1;
		int numItem = Integer.parseInt(props.getProperty("numItem", "4000")) + 1;
		
		Random random = new Random();
		Float[][] matrixUser = new Float[numUser][numLatent];
		for(int i = 0; i < numUser; i++)
			for(int j = 0; j < numLatent; j++)
				matrixUser[i][j] = random.nextFloat();
		Float[][] matrixItem = new Float[numItem][numLatent];
		for(int i = 0; i < numItem; i++)
			for(int j = 0; j < numLatent; j++)
				matrixItem[i][j] = random.nextFloat();
		
		for(int i = 0; i < iters; i++)
		{
			if (input == null)
				throw new Exception("Read file failed!");
			input.seek(0);
			String line = input.readLine();
			String token[];
			int userId, itemId;
			Float rating,prerat,difference;
			while(line != null)
			{
				token = line.split(" ");
				userId = Integer.parseInt(token[0]);
				itemId = Integer.parseInt(token[1]);
				rating = Float.parseFloat(token[2]);
				prerat = 0.0F;
				for(int k = 0; k < numLatent; k++)
					prerat += matrixUser[userId][k] * matrixItem[itemId][k];
				difference = rating - prerat;
				//Float tmp[] = matrixUser[userId].clone();
				Float tmp;
				for(int k = 0; k < numLatent; k++)
				{
					tmp = matrixUser[userId][k];
					matrixUser[userId][k] += stepSize * (matrixItem[itemId][k] * difference - penalty * tmp);
					matrixItem[itemId][k] += stepSize * (tmp * difference - penalty * matrixItem[itemId][k]);
				}
				line = input.readLine();
			}
			stepSize *= stepRate;
		}
		input.close();
		
		File fileUser = new File("user.txt");
		File fileItem = new File("item.txt");
		if(!fileUser.exists())
			fileUser.createNewFile();
		if(!fileItem.exists())
			fileItem.createNewFile();
		BufferedWriter output = new BufferedWriter(new FileWriter(fileUser));
		String line;
		for(int i = 1; i < numUser; i++)
		{
			line = i + " ";
			for(int j = 0; j < numLatent; j++)
				line += matrixUser[i][j] + " ";
			line += "\n";
			output.write(line);
		}
		output.flush();
		output = new BufferedWriter(new FileWriter(fileItem));
		for(int i = 1; i < numItem; i++)
		{
			line = i + " ";
			for(int j = 0; j < numLatent; j++)
				line += matrixItem[i][j] + " ";
			line += "\n";
			output.write(line);
		}
		output.close();
		System.out.println("Compeleted!");
		
		input = new RandomAccessFile("E:/Recommendation/LFM/test.txt","r");
		line = input.readLine();
		String token[];
		int userId,itemId,sum = 0;
		Float rating,tmp,bias = 0F;
		while(line != null)
		{
			token = line.split(" ");
			userId = Integer.parseInt(token[0]);
			itemId = Integer.parseInt(token[1]);
			rating = Float.parseFloat(token[2]);
			tmp = 0F;
			for(int i = 0; i < numLatent; i++)
				tmp += matrixUser[userId][i] * matrixItem[itemId][i];
			tmp -= rating;
			bias += tmp * tmp;
			sum++;
			line = input.readLine();
		}
		input.close();
		System.out.println(Math.sqrt(bias/sum));
		long endTime = System.currentTimeMillis();
		System.out.println("times = " + (endTime - startTime)/1000+"s");
		
		BufferedWriter log = new BufferedWriter(new FileWriter("E:/Recommendation/LFM/log.txt",true));
		line = "iters="+iters+" numLatent="+numLatent+" stepRate="+stepRate
				+" RMSE="+Math.sqrt(bias/sum)+" times="+(endTime - startTime)/1000+"s\n";
		log.write(line);
		log.close();
	}
}
